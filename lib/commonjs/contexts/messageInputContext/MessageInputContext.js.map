{"version":3,"sources":["MessageInputContext.tsx"],"names":["MIME_TYPE_OCTET_STREAM","MessageInputContext","React","createContext","MessageInputProvider","children","value","closePicker","openPicker","selectedPicker","setSelectedPicker","client","channel","giphyEnabled","thread","inputBoxRef","sending","asyncIds","setAsyncIds","asyncUploads","setAsyncUploads","giphyActive","setGiphyActive","sendThreadMessageInChannel","setSendThreadMessageInChannel","editing","hasFilePicker","hasImagePicker","initialValue","maxNumberOfFiles","fileUploads","imageUploads","mentionedUsers","numberOfUploads","setFileUploads","setImageUploads","setMentionedUsers","setNumberOfUploads","setShowMoreOptions","setText","showMoreOptions","text","threadId","id","appendText","newText","prevText","isValidMessage","trim","image","state","FileState","UPLOAD_FAILED","UPLOADING","file","onChange","current","keystroke","onChangeText","openCommandsPicker","focus","openMentionsPicker","openAttachmentPicker","length","Keyboard","dismiss","setTimeout","pickFile","closeAttachmentPicker","undefined","toggleAttachmentPicker","onSelectItem","item","prevMentionedUsers","result","cancelled","docs","forEach","doc","uploadNewFile","removeFile","some","prevFileUploads","filter","prevNumberOfUploads","removeImage","prevImageUploads","resetInput","pendingAttachments","sendMessage","clear","attachments","sendImageAsync","prevAsyncIds","UPLOADED","FINISHED","push","fallback","name","image_url","url","type","startsWith","asset_url","file_size","size","mime_type","title","updatedMessage","mentioned_users","quoted_message","clearEditingState","updateMessagePromise","editMessage","then","parent_id","quoted_message_id","quotedMessage","show_in_channel","clearQuotedMessageState","_error","setQuotedMessageState","slice","console","log","sendMessageAsync","splice","indexOf","prevAsyncUploads","setInputBoxRef","ref","setInputRef","triggerSettings","autoCompleteTriggerSettings","onMentionSelectItem","updateMessage","uploadFile","newFile","map","fileUpload","response","doDocUploadRequest","uri","sendFile","warn","uploadImage","newImage","match","localUri","source","height","width","compressImageQuality","compressedUri","doImageUploadRequest","sendImage","res","includes","imageUpload","Object","keys","Promise","all","concat","uploadNewImage","messageInputContext","openFilePicker","useMessageInputContext","withMessageInputContext","Component","WithMessageInputContextComponent","props","displayName"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useContext, useEffect, useRef, useState } from 'react';\nimport { Keyboard } from 'react-native';\nimport uniq from 'lodash/uniq';\nimport {\n  Attachment,\n  logChatPromiseExecution,\n  SendFileAPIResponse,\n  StreamChat,\n  Message as StreamMessage,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n} from 'stream-chat';\n\nimport { useCreateMessageInputContext } from './hooks/useCreateMessageInputContext';\nimport { isEditingBoolean, useMessageDetailsForState } from './hooks/useMessageDetailsForState';\n\nimport { useAttachmentPickerContext } from '../attachmentPickerContext/AttachmentPickerContext';\nimport { useChatContext } from '../chatContext/ChatContext';\nimport { ChannelContextValue, useChannelContext } from '../channelContext/ChannelContext';\nimport { useThreadContext } from '../threadContext/ThreadContext';\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport {\n  ACITriggerSettings,\n  ACITriggerSettingsParams,\n  FileState,\n  generateRandomId,\n  TriggerSettings,\n} from '../../utils/utils';\n\nimport { Asset, compressImage, getLocalAssetUri, pickDocument } from '../../native';\n\nimport type { TextInput, TextInputProps } from 'react-native';\n\nimport type { AttachButtonProps } from '../../components/MessageInput/AttachButton';\nimport type { CommandsButtonProps } from '../../components/MessageInput/CommandsButton';\nimport type { FileUploadPreviewProps } from '../../components/MessageInput/FileUploadPreview';\nimport type { ImageUploadPreviewProps } from '../../components/MessageInput/ImageUploadPreview';\nimport type { InputButtonsProps } from '../../components/MessageInput/InputButtons';\nimport type { MessageInputProps } from '../../components/MessageInput/MessageInput';\nimport type { MoreOptionsButtonProps } from '../../components/MessageInput/MoreOptionsButton';\nimport type { SendButtonProps } from '../../components/MessageInput/SendButton';\nimport type { UploadProgressIndicatorProps } from '../../components/MessageInput/UploadProgressIndicator';\nimport type { MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst MIME_TYPE_OCTET_STREAM = 'application/octet-stream';\n\nexport type FileUpload = {\n  file: {\n    name: string;\n    size?: number | string;\n    type?: string;\n    uri?: string;\n  };\n  id: string;\n  state: string;\n  url?: string;\n};\n\nexport type ImageUpload = {\n  file: Partial<Asset> & {\n    name?: string;\n  };\n  id: string;\n  state: string;\n  url?: string;\n};\n\nexport type InputConfig = {\n  maxMessageLength?: number;\n  uploadsEnabled?: boolean;\n};\n\nexport type MentionAllAppUsersQuery<Us extends DefaultUserType> = {\n  filters?: UserFilters<Us>;\n  options?: UserOptions;\n  sort?: UserSort<Us>;\n};\n\nexport type LocalMessageInputContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  appendText: (newText: string) => void;\n  asyncIds: string[];\n  asyncUploads: {\n    [key: string]: {\n      state: string;\n      url: string;\n    };\n  };\n  closeAttachmentPicker: () => void;\n  /**\n   * An array of file objects which are set for upload. It has the following structure:\n   *\n   * ```json\n   *  [\n   *    {\n   *      \"file\": // File object,\n   *      \"id\": \"randomly_generated_temp_id_1\",\n   *      \"state\": \"uploading\" // or \"finished\",\n   *      \"url\": \"https://url1.com\",\n   *    },\n   *    {\n   *      \"file\": // File object,\n   *      \"id\": \"randomly_generated_temp_id_2\",\n   *      \"state\": \"uploading\" // or \"finished\",\n   *      \"url\": \"https://url1.com\",\n   *    },\n   *  ]\n   * ```\n   *\n   */\n  fileUploads: FileUpload[];\n  giphyActive: boolean;\n  /**\n   * An array of image objects which are set for upload. It has the following structure:\n   *\n   * ```json\n   *  [\n   *    {\n   *      \"file\": // File object,\n   *      \"id\": \"randomly_generated_temp_id_1\",\n   *      \"state\": \"uploading\" // or \"finished\",\n   *    },\n   *    {\n   *      \"file\": // File object,\n   *      \"id\": \"randomly_generated_temp_id_2\",\n   *      \"state\": \"uploading\" // or \"finished\",\n   *    },\n   *  ]\n   * ```\n   *\n   */\n  imageUploads: ImageUpload[];\n  inputBoxRef: React.MutableRefObject<TextInput | null>;\n  isValidMessage: () => boolean;\n  mentionedUsers: string[];\n  numberOfUploads: number;\n  onChange: (newText: string) => void;\n  onSelectItem: (item: UserResponse<Us>) => void;\n  openAttachmentPicker: () => void;\n  openCommandsPicker: () => void;\n  openFilePicker: () => void;\n  openMentionsPicker: () => void;\n  pickFile: () => Promise<void>;\n  /**\n   * Function for removing a file from the upload preview\n   *\n   * @param id string ID of file in `fileUploads` object in state of MessageInput\n   */\n  removeFile: (id: string) => void;\n  /**\n   * Function for removing an image from the upload preview\n   *\n   * @param id string ID of image in `imageUploads` object in state of MessageInput\n   */\n  removeImage: (id: string) => void;\n  resetInput: (pendingAttachments?: Attachment<At>[]) => void;\n  selectedPicker: string | undefined;\n  sending: React.MutableRefObject<boolean>;\n  sendMessage: () => Promise<void>;\n  sendMessageAsync: (id: string) => void;\n  sendThreadMessageInChannel: boolean;\n  setAsyncIds: React.Dispatch<React.SetStateAction<string[]>>;\n  setAsyncUploads: React.Dispatch<\n    React.SetStateAction<{\n      [key: string]: {\n        state: string;\n        url: string;\n      };\n    }>\n  >;\n  setFileUploads: React.Dispatch<React.SetStateAction<FileUpload[]>>;\n  setGiphyActive: React.Dispatch<React.SetStateAction<boolean>>;\n  setImageUploads: React.Dispatch<React.SetStateAction<ImageUpload[]>>;\n  /**\n   * Ref callback to set reference on input box\n   */\n  setInputBoxRef: (ref: TextInput | null) => void;\n  setMentionedUsers: React.Dispatch<React.SetStateAction<string[]>>;\n  setNumberOfUploads: React.Dispatch<React.SetStateAction<number>>;\n  setSendThreadMessageInChannel: React.Dispatch<React.SetStateAction<boolean>>;\n  setShowMoreOptions: React.Dispatch<React.SetStateAction<boolean>>;\n  setText: React.Dispatch<React.SetStateAction<string>>;\n  showMoreOptions: boolean;\n  /**\n   * Text value of the TextInput\n   */\n  text: string;\n  toggleAttachmentPicker: () => void;\n  /**\n   * Mapping of input triggers to the outputs to be displayed by the AutoCompleteInput\n   */\n  triggerSettings: TriggerSettings<Co, Us>;\n  updateMessage: () => Promise<void>;\n  /** Function for attempting to upload a file */\n  uploadFile: ({ newFile }: { newFile: FileUpload }) => Promise<void>;\n  /** Function for attempting to upload an image */\n  uploadImage: ({ newImage }: { newImage: ImageUpload }) => Promise<void>;\n  uploadNewFile: (file: {\n    name: string;\n    size?: number | string;\n    type?: string;\n    uri?: string;\n  }) => Promise<void>;\n  uploadNewImage: (image: Partial<Asset>) => Promise<void>;\n};\n\nexport type InputMessageInputContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  /**\n   * Custom UI component for attach button.\n   *\n   * Defaults to and accepts same props as: [AttachButton](https://getstream.github.io/stream-chat-react-native/v3/#attachbutton)\n   */\n  AttachButton: React.ComponentType<AttachButtonProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  clearEditingState: () => void;\n  clearQuotedMessageState: () => void;\n  /**\n   * Custom UI component for commands button.\n   *\n   * Defaults to and accepts same props as: [CommandsButton](https://getstream.github.io/stream-chat-react-native/v3/#commandsbutton)\n   */\n  CommandsButton: React.ComponentType<CommandsButtonProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  editing: boolean | MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  editMessage: StreamChat<At, Ch, Co, Ev, Me, Re, Us>['updateMessage'];\n  /**\n   * Custom UI component for FileUploadPreview.\n   * Defaults to and accepts same props as: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageInput/FileUploadPreview.tsx\n   */\n  FileUploadPreview: React.ComponentType<FileUploadPreviewProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /** When false, CommandsButton will be hidden */\n  hasCommands: boolean;\n  /** When false, FileSelectorIcon will be hidden */\n  hasFilePicker: boolean;\n  /** When false, ImageSelectorIcon will be hidden */\n  hasImagePicker: boolean;\n  /**\n   * Custom UI component for ImageUploadPreview.\n   * Defaults to and accepts same props as: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageInput/ImageUploadPreview.tsx\n   */\n  ImageUploadPreview: React.ComponentType<ImageUploadPreviewProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /** Limit on allowed number of files to attach at a time. */\n  maxNumberOfFiles: number;\n  /**\n   * Custom UI component for more options button.\n   *\n   * Defaults to and accepts same props as: [MoreOptionsButton](https://getstream.github.io/stream-chat-react-native/v3/#moreoptionsbutton)\n   */\n  MoreOptionsButton: React.ComponentType<MoreOptionsButtonProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /** Limit on the number of lines in the text input before scrolling */\n  numberOfLines: number;\n  quotedMessage: boolean | MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Custom UI component for send button.\n   *\n   * Defaults to and accepts same props as: [SendButton](https://getstream.github.io/stream-chat-react-native/v3/#sendbutton)\n   */\n  SendButton: React.ComponentType<SendButtonProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  sendImageAsync: boolean;\n  sendMessage: (message: Partial<StreamMessage<At, Me, Us>>) => Promise<void>;\n  setQuotedMessageState: (message: MessageType<At, Ch, Co, Ev, Me, Re, Us>) => void;\n  /**\n   * Custom UI component to render checkbox with text (\"Also send to channel\") in Thread's input box.\n   * When ticked, message will also be sent in parent channel.\n   */\n  ShowThreadMessageInChannelButton: React.ComponentType<{\n    threadList?: boolean;\n  }>;\n  /**\n   * Custom UI component to render upload progress indicator on attachment preview.\n   *\n   * **Default** [UploadProgressIndicator](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageInput/UploadProgressIndicator.tsx)\n   */\n  UploadProgressIndicator: React.ComponentType<UploadProgressIndicatorProps>;\n  /**\n   * Additional props for underlying TextInput component. These props will be forwarded as it is to TextInput component.\n   *\n   * @see See https://reactnative.dev/docs/textinput#reference\n   */\n  additionalTextInputProps?: TextInputProps;\n  /** Max number of suggestions to display in autocomplete list. Defaults to 10. */\n  autoCompleteSuggestionsLimit?: number;\n  /**\n   * Mapping of input triggers to the outputs to be displayed by the AutoCompleteInput\n   */\n  autoCompleteTriggerSettings?: (\n    settings: ACITriggerSettingsParams<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => TriggerSettings<Co, Us>;\n  /**\n   * Compress image with quality (from 0 to 1, where 1 is best quality).\n   * On iOS, values larger than 0.8 don't produce a noticeable quality increase in most images,\n   * while a value of 0.8 will reduce the file size by about half or less compared to a value of 1.\n   * Image picker defaults to 0.8 for iOS and 1 for Android\n   */\n  compressImageQuality?: number;\n  /**\n   * Override file upload request\n   *\n   * @param file    File object - { uri: '', name: '' }\n   * @param channel Current channel object\n   *\n   * @overrideType Function\n   */\n  doDocUploadRequest?: (\n    file: {\n      name: string;\n      size?: string | number;\n      type?: string;\n      uri?: string;\n    },\n    channel: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['channel'],\n  ) => Promise<SendFileAPIResponse>;\n  /**\n   * Override image upload request\n   *\n   * @param file    File object - { uri: '' }\n   * @param channel Current channel object\n   *\n   * @overrideType Function\n   */\n  doImageUploadRequest?: (\n    file: {\n      name?: string;\n      uri?: string;\n    },\n    channel: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['channel'],\n  ) => Promise<SendFileAPIResponse>;\n  /** Initial value to set on input */\n  initialValue?: string;\n  /**\n   * Custom UI component for AutoCompleteInput.\n   * Has access to all of [MessageInputContext](https://github.com/GetStream/stream-chat-react-native/blob/master/src/contexts/messageInputContext/MessageInputContext.tsx)\n   */\n  Input?: React.ComponentType<\n    Omit<MessageInputProps<At, Ch, Co, Ev, Me, Re, Us>, 'Input'> &\n      InputButtonsProps<At, Ch, Co, Ev, Me, Re, Us> & {\n        getUsers: () => UserResponse<Us>[];\n      }\n  >;\n  /**\n   * Custom UI component to override buttons on left side of input box\n   * Defaults to [InputButtons](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageInput/InputButtons.tsx),\n   * which contain following components/buttons:\n   *\n   *  - AttachButton\n   *  - CommandsButtom\n   *\n   * You have access to following prop functions:\n   *\n   * - closeAttachmentPicker\n   * - openAttachmentPicker\n   * - openCommandsPicker\n   * - toggleAttachmentPicker\n   */\n  InputButtons?: React.ComponentType<InputButtonsProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  mentionAllAppUsersEnabled?: boolean;\n  /** Object containing filters/sort/options overrides for an @mention user query */\n  mentionAllAppUsersQuery?: MentionAllAppUsersQuery<Us>;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as a single string argument to the callback handler.\n   */\n  onChangeText?: (newText: string) => void;\n  /**\n   * ref for input setter function\n   *\n   * @param ref [Ref object](https://reactjs.org/docs/refs-and-the-dom.html) for underling `TextInput` component.\n   *\n   * @overrideType Function\n   */\n  setInputRef?: (ref: TextInput | null) => void;\n} & InputConfig;\n\nexport type MessageInputContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = LocalMessageInputContext<At, Co, Us> &\n  Omit<InputMessageInputContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'sendMessage'>;\n\nexport const MessageInputContext = React.createContext({} as MessageInputContextValue);\n\nexport const MessageInputProvider = <\n  At extends DefaultAttachmentType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: InputMessageInputContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => {\n  const { closePicker, openPicker, selectedPicker, setSelectedPicker } =\n    useAttachmentPickerContext();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const { channel, giphyEnabled } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { thread } = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const inputBoxRef = useRef<TextInput | null>(null);\n  const sending = useRef(false);\n\n  const [asyncIds, setAsyncIds] = useState<string[]>([]);\n  const [asyncUploads, setAsyncUploads] = useState<{\n    [key: string]: {\n      state: string;\n      url: string;\n    };\n  }>({});\n  const [giphyActive, setGiphyActive] = useState(false);\n  const [sendThreadMessageInChannel, setSendThreadMessageInChannel] = useState(false);\n  const { editing, hasFilePicker, hasImagePicker, initialValue, maxNumberOfFiles } = value;\n  const {\n    fileUploads,\n    imageUploads,\n    mentionedUsers,\n    numberOfUploads,\n    setFileUploads,\n    setImageUploads,\n    setMentionedUsers,\n    setNumberOfUploads,\n    setShowMoreOptions,\n    setText,\n    showMoreOptions,\n    text,\n  } = useMessageDetailsForState<At, Ch, Co, Ev, Me, Re, Us>(editing, initialValue);\n\n  const threadId = thread?.id;\n  useEffect(() => {\n    setSendThreadMessageInChannel(false);\n  }, [threadId]);\n\n  const appendText = (newText: string) => {\n    setText((prevText) => `${prevText}${newText}`);\n  };\n\n  /** Checks if the message is valid or not. Accordingly we can enable/disable send button */\n  const isValidMessage = () => {\n    if (text && text.trim()) {\n      return true;\n    }\n\n    for (const image of imageUploads) {\n      if (!image || image.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n      if (image.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        return false;\n      }\n\n      return true;\n    }\n\n    for (const file of fileUploads) {\n      if (!file || file.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n      if (file.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const onChange = (newText: string) => {\n    if (sending.current) {\n      return;\n    }\n    setText(newText);\n\n    if (newText && channel) {\n      logChatPromiseExecution(channel.keystroke(thread?.id), 'start typing event');\n    }\n\n    if (value.onChangeText) {\n      value.onChangeText(newText);\n    }\n  };\n\n  const openCommandsPicker = () => {\n    appendText('/');\n    if (inputBoxRef.current) {\n      inputBoxRef.current.focus();\n    }\n  };\n\n  const openMentionsPicker = () => {\n    appendText('@');\n    if (inputBoxRef.current) {\n      inputBoxRef.current.focus();\n    }\n  };\n\n  const openAttachmentPicker = () => {\n    if (hasImagePicker && !fileUploads.length) {\n      Keyboard.dismiss();\n      openPicker();\n      setSelectedPicker('images');\n      /**\n       * TODO: Remove this, this is the result of\n       * the bottom sheet now having some keyboard\n       * handling baked in, creating an issue when\n       * we call dismiss and open in short order.\n       * https://github.com/gorhom/react-native-bottom-sheet/issues/446\n       */\n      setTimeout(openPicker, 600);\n    } else if (hasFilePicker && numberOfUploads < maxNumberOfFiles) {\n      pickFile();\n    }\n  };\n\n  const closeAttachmentPicker = () => {\n    setSelectedPicker(undefined);\n    closePicker();\n  };\n\n  const toggleAttachmentPicker = () => {\n    if (selectedPicker) {\n      closeAttachmentPicker();\n    } else {\n      openAttachmentPicker();\n    }\n  };\n\n  const onSelectItem = (item: UserResponse<Us>) => {\n    setMentionedUsers((prevMentionedUsers) => [...prevMentionedUsers, item.id]);\n  };\n\n  const pickFile = async () => {\n    if (numberOfUploads >= value.maxNumberOfFiles) {\n      return;\n    }\n\n    const result = await pickDocument({\n      maxNumberOfFiles: value.maxNumberOfFiles - numberOfUploads,\n    });\n    if (!result.cancelled && result.docs) {\n      result.docs.forEach((doc) => {\n        /**\n         * TODO: The current tight coupling of images to the image\n         * picker does not allow images picked from the file picker\n         * to be rendered in a preview via the uploadNewImage call.\n         * This should be updated alongside allowing image a file\n         * uploads together.\n         */\n        uploadNewFile(doc);\n      });\n    }\n  };\n\n  const removeFile = (id: string) => {\n    if (fileUploads.some((file) => file.id === id)) {\n      setFileUploads((prevFileUploads) => prevFileUploads.filter((file) => file.id !== id));\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n    }\n  };\n\n  const removeImage = (id: string) => {\n    if (imageUploads.some((image) => image.id === id)) {\n      setImageUploads((prevImageUploads) => prevImageUploads.filter((image) => image.id !== id));\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n    }\n  };\n\n  const resetInput = (pendingAttachments: Attachment<At>[] = []) => {\n    setFileUploads([]);\n    setGiphyActive(false);\n    setShowMoreOptions(true);\n    setImageUploads([]);\n    setMentionedUsers([]);\n    setNumberOfUploads(\n      (prevNumberOfUploads) => prevNumberOfUploads - (pendingAttachments?.length || 0),\n    );\n    setText('');\n  };\n\n  const sendMessage = async () => {\n    if (sending.current) {\n      return;\n    }\n    sending.current = true;\n\n    const prevText = giphyEnabled && giphyActive ? `/giphy ${text}` : text;\n    await setText('');\n    if (inputBoxRef.current) {\n      inputBoxRef.current.clear();\n    }\n\n    const attachments = [] as Attachment<At>[];\n    for (const image of imageUploads) {\n      if (!image || image.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n\n      if (image.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        if (value.sendImageAsync) {\n          /**\n           * If user hit send before image uploaded, push ID into a queue to later\n           * be matched with the successful CDN response\n           */\n          setAsyncIds((prevAsyncIds) => [...prevAsyncIds, image.id]);\n        } else {\n          sending.current = false;\n          return setText(prevText);\n        }\n      }\n\n      if (image.state === FileState.UPLOADED || image.state === FileState.FINISHED) {\n        attachments.push({\n          fallback: image.file.name,\n          image_url: image.url,\n          type: 'image',\n        } as Attachment<At>);\n      }\n    }\n\n    for (const file of fileUploads) {\n      if (!file || file.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n      if (file.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        sending.current = false;\n        return;\n      }\n      if (file.state === FileState.UPLOADED || file.state === FileState.FINISHED) {\n        if (file.file.type?.startsWith('image/')) {\n          attachments.push({\n            fallback: file.file.name,\n            image_url: file.url,\n            type: 'image',\n          } as Attachment<At>);\n        } else {\n          attachments.push({\n            asset_url: file.url,\n            file_size: file.file.size,\n            mime_type: file.file.type,\n            title: file.file.name,\n            type: 'file',\n          } as Attachment<At>);\n        }\n      }\n    }\n\n    // Disallow sending message if its empty.\n    if (!prevText && attachments.length === 0) {\n      sending.current = false;\n      return;\n    }\n\n    if (value.editing && !isEditingBoolean(value.editing)) {\n      const updatedMessage = {\n        ...value.editing,\n        attachments,\n        mentioned_users: mentionedUsers,\n        quoted_message: undefined,\n        text: prevText,\n      } as Parameters<StreamChat<At, Ch, Co, Ev, Me, Re, Us>['updateMessage']>[0];\n\n      // TODO: Remove this line and show an error when submit fails\n      value.clearEditingState();\n\n      const updateMessagePromise = value.editMessage(updatedMessage).then(value.clearEditingState);\n      resetInput(attachments);\n      logChatPromiseExecution(updateMessagePromise, 'update message');\n\n      sending.current = false;\n    } else {\n      try {\n        value.sendMessage({\n          attachments,\n          mentioned_users: uniq(mentionedUsers),\n          /** Parent message id - in case of thread */\n          parent_id: thread?.id,\n          quoted_message_id:\n            typeof value.quotedMessage === 'boolean' ? undefined : value.quotedMessage.id,\n          show_in_channel: sendThreadMessageInChannel || undefined,\n          text: prevText,\n        } as unknown as StreamMessage<At, Me, Us>);\n\n        value.clearQuotedMessageState();\n        sending.current = false;\n        resetInput(attachments);\n      } catch (_error) {\n        sending.current = false;\n        if (value.quotedMessage && typeof value.quotedMessage !== 'boolean') {\n          value.setQuotedMessageState(value.quotedMessage);\n        }\n        setText(prevText.slice(giphyEnabled && giphyActive ? 7 : 0)); // 7 because of '/giphy ' length\n        console.log('Failed to send message');\n      }\n    }\n  };\n\n  const sendMessageAsync = (id: string) => {\n    const image = asyncUploads[id];\n    if (!image || image.state === FileState.UPLOAD_FAILED) {\n      return;\n    }\n\n    if (image.state === FileState.UPLOADED || image.state === FileState.FINISHED) {\n      const attachments = [\n        {\n          image_url: image.url,\n          type: 'image',\n        },\n      ] as StreamMessage<At, Me, Us>['attachments'];\n\n      try {\n        value.sendMessage({\n          attachments,\n          mentioned_users: [],\n          parent_id: thread?.id,\n          quoted_message_id:\n            typeof value.quotedMessage === 'boolean' ? undefined : value.quotedMessage.id,\n          show_in_channel: sendThreadMessageInChannel || undefined,\n          text: '',\n        } as unknown as Partial<StreamMessage<At, Me, Us>>);\n\n        setAsyncIds((prevAsyncIds) => prevAsyncIds.splice(prevAsyncIds.indexOf(id), 1));\n        setAsyncUploads((prevAsyncUploads) => {\n          delete prevAsyncUploads[id];\n          return prevAsyncUploads;\n        });\n\n        setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n      } catch (_error) {\n        console.log('Failed');\n      }\n    }\n  };\n\n  const setInputBoxRef = (ref: TextInput | null) => {\n    inputBoxRef.current = ref;\n    if (value.setInputRef) {\n      value.setInputRef(ref);\n    }\n  };\n\n  const triggerSettings = channel\n    ? value.autoCompleteTriggerSettings\n      ? value.autoCompleteTriggerSettings({\n          channel,\n          client,\n          onMentionSelectItem: onSelectItem,\n        })\n      : ACITriggerSettings<At, Ch, Co, Ev, Me, Re, Us>({\n          channel,\n          client,\n          onMentionSelectItem: onSelectItem,\n        })\n    : ({} as TriggerSettings<Co, Us>);\n\n  const updateMessage = async () => {\n    try {\n      if (!isEditingBoolean(value.editing)) {\n        await client.updateMessage({\n          ...value.editing,\n          quoted_message: undefined,\n          text: giphyEnabled && giphyActive ? `/giphy ${text}` : text,\n        } as Parameters<StreamChat<At, Ch, Co, Ev, Me, Re, Us>['updateMessage']>[0]);\n      }\n\n      resetInput();\n      value.clearEditingState();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const uploadFile = async ({ newFile }: { newFile: FileUpload }) => {\n    if (!newFile) {\n      return;\n    }\n    const { file, id } = newFile;\n\n    await setFileUploads((prevFileUploads) =>\n      prevFileUploads.map((fileUpload) => {\n        if (fileUpload.id === id) {\n          return {\n            ...fileUpload,\n            state: FileState.UPLOADING,\n          };\n        }\n        return fileUpload;\n      }),\n    );\n\n    let response = {} as SendFileAPIResponse;\n    try {\n      if (value.doDocUploadRequest) {\n        response = await value.doDocUploadRequest(file, channel);\n      } else if (channel && file.uri) {\n        response = await channel.sendFile(file.uri, file.name, MIME_TYPE_OCTET_STREAM);\n      }\n    } catch (error) {\n      console.warn(error);\n      if (!newFile) {\n        setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n      } else {\n        setFileUploads((prevFileUploads) =>\n          prevFileUploads.map((fileUpload) => {\n            if (fileUpload.id === id) {\n              return {\n                ...fileUpload,\n                state: FileState.UPLOAD_FAILED,\n              };\n            }\n            return fileUpload;\n          }),\n        );\n        setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n      }\n      return;\n    }\n\n    setFileUploads((prevFileUploads) =>\n      prevFileUploads.map((fileUpload) => {\n        if (fileUpload.id === id) {\n          return {\n            ...fileUpload,\n            state: FileState.UPLOADED,\n            url: response.file,\n          };\n        }\n        return fileUpload;\n      }),\n    );\n  };\n\n  const uploadImage = async ({ newImage }: { newImage: ImageUpload }) => {\n    const { file, id } = newImage || {};\n    if (!file) {\n      return;\n    }\n\n    let response = {} as SendFileAPIResponse;\n\n    try {\n      /**\n       * Expo now uses the assets-library which is also how remote\n       * native files are presented. We now return a file id from Expo\n       * only, if that file id exits we call getLocalAssetUri to download\n       * the asset for expo before uploading it. We do the same for native\n       * if the uri includes assets-library, this uses the CameraRoll.save\n       * function to also create a local uri.\n       */\n      const localUri = file.id\n        ? await getLocalAssetUri(file.id)\n        : file.uri?.match(/assets-library/)\n        ? await getLocalAssetUri(file.uri)\n        : file.uri;\n\n      const uri = file.name || localUri || '';\n      /**\n       * We skip compression if:\n       * - the file is from the camera as that should already be compressed\n       * - the file has not height/width value to maintain for compression\n       * - the compressImageQuality number is not present or is 1 (meaning no compression)\n       */\n      const compressedUri = await (file.source === 'camera' ||\n      !file.height ||\n      !file.width ||\n      typeof value.compressImageQuality !== 'number' ||\n      value.compressImageQuality === 1\n        ? uri\n        : compressImage({\n            compressImageQuality: value.compressImageQuality,\n            height: file.height,\n            uri,\n            width: file.width,\n          }));\n\n      if (value.doImageUploadRequest) {\n        response = await value.doImageUploadRequest(file, channel);\n      } else if (compressedUri && channel) {\n        if (value.sendImageAsync) {\n          channel.sendImage(compressedUri, undefined, MIME_TYPE_OCTET_STREAM).then((res) => {\n            if (asyncIds.includes(id)) {\n              // Evaluates to true if user hit send before image successfully uploaded\n              setAsyncUploads((prevAsyncUploads) => {\n                prevAsyncUploads[id] = {\n                  ...prevAsyncUploads[id],\n                  state: FileState.UPLOADED,\n                  url: res.file,\n                };\n                return prevAsyncUploads;\n              });\n            } else {\n              setImageUploads((prevImageUploads) =>\n                prevImageUploads.map((imageUpload) => {\n                  if (imageUpload.id === id) {\n                    return {\n                      ...imageUpload,\n                      state: FileState.UPLOADED,\n                      url: res.file,\n                    };\n                  }\n                  return imageUpload;\n                }),\n              );\n            }\n          });\n        } else {\n          response = await channel.sendImage(compressedUri, undefined, MIME_TYPE_OCTET_STREAM);\n        }\n      }\n\n      if (Object.keys(response).length) {\n        setImageUploads((prevImageUploads) =>\n          prevImageUploads.map((imageUpload) => {\n            if (imageUpload.id === id) {\n              return {\n                ...imageUpload,\n                state: FileState.UPLOADED,\n                url: response.file,\n              };\n            }\n            return imageUpload;\n          }),\n        );\n      }\n    } catch (error) {\n      console.warn(error);\n      if (newImage) {\n        setImageUploads((prevImageUploads) =>\n          prevImageUploads.map((imageUpload) => {\n            if (imageUpload.id === id) {\n              return {\n                ...imageUpload,\n                state: FileState.UPLOAD_FAILED,\n              };\n            }\n            return imageUpload;\n          }),\n        );\n      }\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n\n      return;\n    }\n  };\n\n  const uploadNewFile = async (file: {\n    name: string;\n    size?: number | string;\n    type?: string;\n    uri?: string;\n  }) => {\n    const id = generateRandomId();\n    const newFile = {\n      file: { ...file, type: MIME_TYPE_OCTET_STREAM },\n      id,\n      state: FileState.UPLOADING,\n    };\n    await Promise.all([\n      setFileUploads((prevFileUploads) => prevFileUploads.concat([newFile])),\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads + 1),\n    ]);\n\n    uploadFile({ newFile });\n  };\n\n  const uploadNewImage = async (image: Partial<Asset>) => {\n    const id = generateRandomId();\n    const newImage = {\n      file: image,\n      id,\n      state: FileState.UPLOADING,\n    };\n    await Promise.all([\n      setImageUploads((prevImageUploads) => prevImageUploads.concat([newImage])),\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads + 1),\n    ]);\n\n    uploadImage({ newImage });\n  };\n\n  const messageInputContext = useCreateMessageInputContext({\n    appendText,\n    asyncIds,\n    asyncUploads,\n    closeAttachmentPicker,\n    fileUploads,\n    giphyActive,\n    imageUploads,\n    inputBoxRef,\n    isValidMessage,\n    mentionedUsers,\n    numberOfUploads,\n    onChange,\n    onSelectItem,\n    openAttachmentPicker,\n    openCommandsPicker,\n    openFilePicker: pickFile,\n    openMentionsPicker,\n    pickFile,\n    removeFile,\n    removeImage,\n    resetInput,\n    selectedPicker,\n    sending,\n    sendMessageAsync,\n    sendThreadMessageInChannel,\n    setAsyncIds,\n    setAsyncUploads,\n    setFileUploads,\n    setGiphyActive,\n    setImageUploads,\n    setInputBoxRef,\n    setMentionedUsers,\n    setNumberOfUploads,\n    setSendThreadMessageInChannel,\n    setShowMoreOptions,\n    setText,\n    showMoreOptions,\n    text,\n    thread,\n    toggleAttachmentPicker,\n    triggerSettings,\n    updateMessage,\n    uploadFile,\n    uploadImage,\n    uploadNewFile,\n    uploadNewImage,\n    ...value,\n    sendMessage, // overriding the originally passed in sendMessage\n  });\n\n  return (\n    <MessageInputContext.Provider\n      value={messageInputContext as unknown as MessageInputContextValue}\n    >\n      {children}\n    </MessageInputContext.Provider>\n  );\n};\n\nexport const useMessageInputContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() =>\n  useContext(MessageInputContext) as unknown as MessageInputContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >;\n\n/**\n * Typescript currently does not support partial inference so if MessageInputContext\n * typing is desired while using the HOC withMessageInputContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageInputContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageInputContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithMessageInputContextComponent = (\n    props: Omit<P, keyof MessageInputContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const messageInputContext = useMessageInputContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...messageInputContext} />;\n  };\n  WithMessageInputContextComponent.displayName = `WithMessageInputContext${getDisplayName(\n    Component,\n  )}`;\n  return WithMessageInputContextComponent;\n};\n"]}