{"version":3,"sources":["MessageContext.tsx"],"names":["MessageContext","React","createContext","MessageProvider","children","value","useMessageContext","withMessageContext","Component","WithMessageContextComponent","props","messageContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AAwHO,IAAMA,cAAc,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAAvB;;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAS7BC,QAT6B,QAS7BA,QAT6B;AAAA,MAU7BC,KAV6B,QAU7BA,KAV6B;AAAA,SAc7B,gCAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAd6B;AAAA,CAAxB;;;;AAmBA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAQ1B,uBAAWN,cAAX,CAR0B;AAAA,CAA1B;;;;AAeA,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAUhCC,SAVgC,EAW6C;AAC7E,MAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAClCC,KADkC,EAE/B;AACH,QAAMC,cAAc,GAAGL,iBAAiB,EAAxC;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,2BAA2B,CAACG,WAA5B,0BAA+D,oCAAeJ,SAAf,CAA/D;AACA,SAAOC,2BAAP;AACD,CArBM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { Attachment } from 'stream-chat';\n\nimport type { ActionHandler } from '../../components/Attachment/Attachment';\nimport type { TouchableHandlerPayload } from '../../components/Message/Message';\nimport type { GroupType, MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { ChannelContextValue } from '../../contexts/channelContext/ChannelContext';\nimport type { MessageContentType } from '../../contexts/messagesContext/MessagesContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type Alignment = 'right' | 'left';\n\nexport type Reactions = {\n  own: boolean;\n  type: string;\n}[];\n\nexport type MessageContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  /** Whether or not actions can be performed on message */\n  actionsEnabled: boolean;\n  /** Position of the message, either 'right' or 'left' */\n  alignment: Alignment;\n  /**\n   * Function that returns a boolean indicating whether or not the user can edit/delete the message.\n   */\n  canModifyMessage: boolean;\n  /** The files attached to a message */\n  files: Attachment<At>[];\n  /**\n   * Position of message in group - top, bottom, middle, single.\n   *\n   * Message group is a group of consecutive messages from same user. groupStyles can be used to style message as per their position in message group\n   * e.g., user avatar (to which message belongs to) is only showed for last (bottom) message in group.\n   */\n  groupStyles: GroupType[];\n  /** Handler for actions. Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands). */\n  handleAction: ActionHandler;\n  handleDeleteMessage: () => Promise<void>;\n  handleEditMessage: () => void;\n  handleQuotedReplyMessage: () => void;\n  handleResendMessage: () => Promise<void>;\n  handleToggleBanUser: () => Promise<void>;\n  handleToggleMuteUser: () => Promise<void>;\n  handleToggleReaction: (reactionType: string) => Promise<void>;\n  /** Whether or not message has reactions */\n  hasReactions: boolean;\n  /** The images attached to a message */\n  images: Attachment<At>[];\n  /** Whether or not this is the active user's message */\n  isMyMessage: boolean;\n  /** Whether or not this is the last message in a group of messages */\n  lastGroupMessage: boolean;\n  /** Current [message object](https://getstream.io/chat/docs/#message_format) */\n  message: MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  /** Order to render the message content */\n  messageContentOrder: MessageContentType[];\n  /**\n   * You can call methods available on the Message\n   * component such as handleEdit, handleDelete, handleAction etc.\n   *\n   * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/Message.tsx)\n   *\n   * By default, we show the overlay with all the message actions on long press.\n   *\n   * @param event   Event object for onLongPress event\n   */\n  onLongPress: (payload: TouchableHandlerPayload) => void;\n  /** Whether the message is only text and the text is only emojis */\n  onlyEmojis: boolean;\n  /** Handler to open a thread on a message */\n  onOpenThread: () => void;\n  /**\n   * You can call methods available on the Message\n   * component such as handleEdit, handleDelete, handleAction etc.\n   *\n   * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/Message.tsx)\n   *\n   * By default, we will dismiss the keyboard on press.\n   *\n   * @param event   Event object for onPress event\n   */\n  onPress: (payload: TouchableHandlerPayload) => void;\n  onPressIn: ((payload: TouchableHandlerPayload) => void) | null;\n  /** The images attached to a message */\n  otherAttachments: Attachment<At>[];\n  reactions: Reactions;\n  showMessageOverlay: (messageReactions?: boolean) => void;\n  showMessageStatus: boolean;\n  /** Whether or not the Message is part of a Thread */\n  threadList: boolean;\n  goToMessage?: (messageId: string) => void;\n  /** Latest message id on current channel */\n  lastReceivedId?: string;\n  /** Prevent message being pressed for image viewer view */\n  preventPress?: boolean;\n  /** Whether or not the avatar show show next to Message */\n  showAvatar?: boolean;\n} & Pick<\n  ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n  'channel' | 'disabled' | 'members' | 'readEventsEnabled'\n>;\n\nexport const MessageContext = React.createContext({} as MessageContextValue);\n\nexport const MessageProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => (\n  <MessageContext.Provider value={value as unknown as MessageContextValue}>\n    {children}\n  </MessageContext.Provider>\n);\n\nexport const useMessageContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() => useContext(MessageContext) as unknown as MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n\n/**\n * Typescript currently does not support partial inference so if MessageContext\n * typing is desired while using the HOC withMessageContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithMessageContextComponent = (\n    props: Omit<P, keyof MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const messageContext = useMessageContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...messageContext} />;\n  };\n  WithMessageContextComponent.displayName = `WithMessageContext${getDisplayName(Component)}`;\n  return WithMessageContextComponent;\n};\n"]}