{"version":3,"sources":["TypingContext.tsx"],"names":["TypingContext","React","createContext","TypingProvider","children","value","useTypingContext","withTypingContext","Component","WithTypingContextComponent","props","typingContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AA2BO,IAAMA,aAAa,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAAtB;;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAS5BC,QAT4B,QAS5BA,QAT4B;AAAA,MAU5BC,KAV4B,QAU5BA,KAV4B;AAAA,SAc5B,gCAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAd4B;AAAA,CAAvB;;;;AAmBA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAQzB,uBAAWN,aAAX,CARyB;AAAA,CAAzB;;;;AAeA,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAU/BC,SAV+B,EAW6C;AAC5E,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,KADiC,EAE9B;AACH,QAAMC,aAAa,GAAGL,gBAAgB,EAAtC;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,0BAA0B,CAACG,WAA3B,yBAA6D,oCAAeJ,SAAf,CAA7D;AACA,SAAOC,0BAAP;AACD,CArBM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { ChannelState } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type TypingContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  typing: ChannelState<At, Ch, Co, Ev, Me, Re, Us>['typing'];\n};\n\nexport const TypingContext = React.createContext({} as TypingContextValue);\n\nexport const TypingProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => (\n  <TypingContext.Provider value={value as unknown as TypingContextValue}>\n    {children}\n  </TypingContext.Provider>\n);\n\nexport const useTypingContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() => useContext(TypingContext) as unknown as TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n\n/**\n * Typescript currently does not support partial inference so if TypingContext\n * typing is desired while using the HOC withTypingContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withTypingContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithTypingContextComponent = (\n    props: Omit<P, keyof TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const typingContext = useTypingContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...typingContext} />;\n  };\n  WithTypingContextComponent.displayName = `WithTypingContext${getDisplayName(Component)}`;\n  return WithTypingContextComponent;\n};\n"]}