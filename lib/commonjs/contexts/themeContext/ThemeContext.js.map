{"version":3,"sources":["ThemeContext.tsx"],"names":["mergeThemes","params","style","theme","finalTheme","Object","keys","length","JSON","parse","stringify","defaultTheme","ThemeContext","React","createContext","ThemeProvider","props","children","mergedStyle","useTheme","modifiedTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;AAgBO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAgC;AACzD,MAAQC,KAAR,GAAyBD,MAAzB,CAAQC,KAAR;AAAA,MAAeC,KAAf,GAAyBF,MAAzB,CAAeE,KAAf;AACA,MAAMC,UAAU,GACd,CAACD,KAAD,IAAUE,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,MAAnB,KAA8B,CAAxC,GACIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeC,mBAAf,CAAX,CADJ,GAEIH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,KAAf,CAAX,CAHN;;AAMA,MAAID,KAAJ,EAAW;AACT,2BAAME,UAAN,EAAkBF,KAAlB;AACD;;AAED,SAAOE,UAAP;AACD,CAbM;;;;AAeA,IAAMQ,YAAY,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAArB;;;;AAEA,IAAMC,aAAgD,GAAG,SAAnDA,aAAmD,CAACC,KAAD,EAAW;AACzE,MAAQC,QAAR,GAAyCD,KAAzC,CAAQC,QAAR;AAAA,MAAkBC,WAAlB,GAAyCF,KAAzC,CAAkBE,WAAlB;AAAA,MAA+BhB,KAA/B,GAAyCc,KAAzC,CAA+Bd,KAA/B;;AACA,kBAAkBiB,QAAQ,EAA1B;AAAA,MAAQhB,KAAR,aAAQA,KAAR;;AACA,MAAMiB,aAAa,GAAG,oBAAQ,YAAM;AAClC,QAAIF,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,WAAOlB,WAAW,CAAC;AAAEE,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,KAAK,EAALA;AAAT,KAAD,CAAlB;AACD,GANqB,EAMnB,CAACe,WAAD,EAAchB,KAAd,EAAqBC,KAArB,CANmB,CAAtB;AAQA,SAAO,gCAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEiB,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CH,QAA9C,CAAP;AACD,CAZM;;;;AAcA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC5B,MAAMhB,KAAK,GAAG,uBAAWS,YAAX,CAAd;AAEA,SAAO;AAAET,IAAAA,KAAK,EAALA;AAAF,GAAP;AACD,CAJM","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\n\nimport { defaultTheme, Theme } from './utils/theme';\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: DeepPartial<T[P]>;\n};\n\nexport type ThemeProviderInputValue = {\n  mergedStyle?: Theme;\n  style?: DeepPartial<Theme>;\n};\n\nexport type MergedThemesParams = {\n  style?: DeepPartial<Theme>;\n  theme?: Theme;\n};\n\nexport const mergeThemes = (params: MergedThemesParams) => {\n  const { style, theme } = params;\n  const finalTheme = (\n    !theme || Object.keys(theme).length === 0\n      ? JSON.parse(JSON.stringify(defaultTheme))\n      : JSON.parse(JSON.stringify(theme))\n  ) as Theme;\n\n  if (style) {\n    merge(finalTheme, style);\n  }\n\n  return finalTheme;\n};\n\nexport const ThemeContext = React.createContext({} as Theme);\n\nexport const ThemeProvider: React.FC<ThemeProviderInputValue> = (props) => {\n  const { children, mergedStyle, style } = props;\n  const { theme } = useTheme();\n  const modifiedTheme = useMemo(() => {\n    if (mergedStyle) {\n      return mergedStyle;\n    }\n\n    return mergeThemes({ style, theme });\n  }, [mergedStyle, style, theme]);\n\n  return <ThemeContext.Provider value={modifiedTheme}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = () => {\n  const theme = useContext(ThemeContext);\n\n  return { theme };\n};\n"]}