{"version":3,"sources":["ImageGrid.tsx"],"names":["styles","StyleSheet","create","avatarImage","borderRadius","height","width","avatarImageWrapper","borderWidth","margin","contentContainer","flexGrow","image","GridImage","item","theme","white","colors","imageGallery","grid","gridAvatar","gridAvatarWrapper","gridImage","avatarComponent","imageComponent","restItem","numberOfImageGalleryGridColumns","selectAndClose","uri","user","size","backgroundColor","renderItem","ImageGrid","props","closeGridView","photos","resetVisibleValues","setImage","imageGridItems","map","photo","messageId","url","index","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ImageBackground, StyleSheet } from 'react-native';\nimport { BottomSheetFlatList, TouchableOpacity } from '@gorhom/bottom-sheet';\n\nimport { Avatar } from '../../Avatar/Avatar';\n\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport { vw } from '../../../utils/utils';\n\nimport type { Photo } from '../ImageGallery';\n\nimport type { DefaultUserType, UnknownType } from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  avatarImage: {\n    borderRadius: 22,\n    height: 22,\n    width: 22,\n  },\n  avatarImageWrapper: {\n    borderRadius: 24,\n    borderWidth: 1,\n    height: 24,\n    margin: 8,\n    width: 24,\n  },\n  contentContainer: {\n    flexGrow: 1,\n  },\n  image: {\n    margin: 1,\n  },\n});\n\nexport type ImageGalleryGridImageComponent<Us extends UnknownType = DefaultUserType> = ({\n  item,\n}: {\n  item: Photo<Us> & {\n    selectAndClose: () => void;\n    numberOfImageGalleryGridColumns?: number;\n  };\n}) => React.ReactElement | null;\n\nexport type ImageGalleryGridImageComponents<Us extends UnknownType = DefaultUserType> = {\n  avatarComponent?: ImageGalleryGridImageComponent<Us>;\n  imageComponent?: ImageGalleryGridImageComponent<Us>;\n};\n\nexport type GridImageItem<Us extends DefaultUserType = DefaultUserType> = Photo<Us> &\n  ImageGalleryGridImageComponents<Us> & {\n    selectAndClose: () => void;\n    numberOfImageGalleryGridColumns?: number;\n  };\n\nconst GridImage = <Us extends DefaultUserType = DefaultUserType>({\n  item,\n}: {\n  item: GridImageItem<Us>;\n}) => {\n  const {\n    theme: {\n      colors: { white },\n      imageGallery: {\n        grid: { gridAvatar, gridAvatarWrapper, gridImage },\n      },\n    },\n  } = useTheme();\n  const { avatarComponent, imageComponent, ...restItem } = item;\n\n  const { numberOfImageGalleryGridColumns, selectAndClose, uri, user } = restItem;\n\n  const size = vw(100) / (numberOfImageGalleryGridColumns || 3) - 2;\n\n  if (imageComponent) {\n    return imageComponent({ item: restItem });\n  }\n\n  return (\n    <TouchableOpacity onPress={selectAndClose}>\n      <ImageBackground\n        source={{ uri }}\n        style={[styles.image, { height: size, width: size }, gridImage]}\n      >\n        {avatarComponent\n          ? avatarComponent({ item: restItem })\n          : !!user?.image && (\n              <Avatar\n                containerStyle={[\n                  styles.avatarImageWrapper,\n                  { backgroundColor: white },\n                  gridAvatarWrapper,\n                ]}\n                image={user.image}\n                imageStyle={gridAvatar}\n                size={22}\n              />\n            )}\n      </ImageBackground>\n    </TouchableOpacity>\n  );\n};\n\nconst renderItem = <Us extends UnknownType = DefaultUserType>({\n  item,\n}: {\n  item: GridImageItem<Us>;\n}) => <GridImage item={item} />;\n\ntype Props<Us extends UnknownType = DefaultUserType> = ImageGalleryGridImageComponents<Us> & {\n  closeGridView: () => void;\n  photos: Photo<Us>[];\n  resetVisibleValues: () => void;\n  setImage: React.Dispatch<\n    React.SetStateAction<\n      | {\n          messageId?: string | undefined;\n          url?: string | undefined;\n        }\n      | undefined\n    >\n  >;\n  numberOfImageGalleryGridColumns?: number;\n};\n\nexport const ImageGrid = <Us extends UnknownType = DefaultUserType>(props: Props<Us>) => {\n  const {\n    avatarComponent,\n    closeGridView,\n    imageComponent,\n    numberOfImageGalleryGridColumns,\n    photos,\n    resetVisibleValues,\n    setImage,\n  } = props;\n\n  const {\n    theme: {\n      colors: { white },\n      imageGallery: {\n        grid: { contentContainer },\n      },\n    },\n  } = useTheme();\n\n  const imageGridItems = photos.map((photo) => ({\n    ...photo,\n    avatarComponent,\n    imageComponent,\n    numberOfImageGalleryGridColumns,\n    selectAndClose: () => {\n      resetVisibleValues();\n      setImage({ messageId: photo.messageId, url: photo.uri });\n      closeGridView();\n    },\n  }));\n\n  return (\n    <BottomSheetFlatList\n      contentContainerStyle={[\n        styles.contentContainer,\n        { backgroundColor: white },\n        contentContainer,\n      ]}\n      data={imageGridItems}\n      keyExtractor={(item, index) => `${item.uri}-${index}`}\n      numColumns={numberOfImageGalleryGridColumns || 3}\n      renderItem={renderItem}\n    />\n  );\n};\n\nImageGrid.displayName = 'ImageGrid{imageGallery{grid}}';\n"]}