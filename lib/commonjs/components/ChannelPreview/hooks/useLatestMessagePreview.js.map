{"version":3,"sources":["useLatestMessagePreview.ts"],"names":["getLatestMessageDisplayText","channel","client","message","t","bold","text","deleted_at","currentUserId","userID","messageOwnerId","user","id","members","Object","keys","state","owner","length","name","username","ownerText","boldOwner","includes","shortenedText","substring","replace","mentionedUsers","Array","isArray","mentioned_users","reduce","acc","cur","userName","regEx","RegExp","split","index","test","push","command","attachments","getLatestMessageDisplayDate","tDateTimeParser","parserOutput","created_at","isSame","Date","format","getLatestMessageReadStatus","readEvents","readList","read","messageUpdatedAt","updated_at","undefined","values","some","last_read","getLatestMessagePreview","params","lastMessage","messages","messageObject","previews","status","useLatestMessagePreview","forceUpdate","channelConfigExists","getConfig","channelLastMessageString","setReadEvents","latestMessagePreview","setLatestMessagePreview","readStatus","read_events"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport {\n  isDayOrMoment,\n  TDateTimeParser,\n  useTranslationContext,\n} from '../../../contexts/translationContext/TranslationContext';\n\nimport type { Channel, ChannelState, MessageResponse, StreamChat } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\ntype LatestMessage<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> =\n  | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['formatMessage']>\n  | MessageResponse<At, Ch, Co, Me, Re, Us>;\n\nexport type LatestMessagePreview<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  created_at: string | number | Date;\n  messageObject: LatestMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined;\n  previews: {\n    bold: boolean;\n    text: string;\n  }[];\n  status: number;\n};\n\nconst getLatestMessageDisplayText = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>,\n  message: LatestMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined,\n  t: (key: string) => string,\n) => {\n  if (!message) return [{ bold: false, text: t('Nothing yet...') }];\n  if (message.deleted_at) return [{ bold: false, text: t('Message deleted') }];\n  const currentUserId = client.userID;\n  const messageOwnerId = message.user?.id;\n  const members = Object.keys(channel.state.members);\n  const owner =\n    messageOwnerId === currentUserId\n      ? t('You')\n      : members.length > 2\n      ? message.user?.name || message.user?.username || message.user?.id || ''\n      : '';\n  const ownerText = owner ? `${owner === t('You') ? '' : '@'}${owner}: ` : '';\n  const boldOwner = ownerText.includes('@');\n  if (message.text) {\n    // rough guess optimization to limit string preview to max 100 characters\n    const shortenedText = message.text.substring(0, 100).replace(/\\n/g, ' ');\n    const mentionedUsers = Array.isArray(message.mentioned_users)\n      ? message.mentioned_users.reduce((acc, cur) => {\n          const userName = cur.name || cur.id || '';\n          if (userName) {\n            acc += `${acc.length ? '|' : ''}@${userName}`;\n          }\n          return acc;\n        }, '')\n      : '';\n    const regEx = new RegExp(`^(${mentionedUsers})`);\n    return [\n      { bold: boldOwner, text: ownerText },\n      ...shortenedText.split('').reduce(\n        (acc, cur, index) => {\n          if (cur === '@' && mentionedUsers && regEx.test(shortenedText.substring(index))) {\n            acc.push({ bold: true, text: cur });\n          } else if (mentionedUsers && regEx.test(acc[acc.length - 1].text)) {\n            acc.push({ bold: false, text: cur });\n          } else {\n            acc[acc.length - 1].text += cur;\n          }\n          return acc;\n        },\n        [{ bold: false, text: '' }],\n      ),\n    ];\n  }\n  if (message.command) {\n    return [\n      { bold: boldOwner, text: ownerText },\n      { bold: false, text: `/${message.command}` },\n    ];\n  }\n  if (message.attachments?.length) {\n    return [\n      { bold: boldOwner, text: ownerText },\n      { bold: false, text: t('🏙 Attachment...') },\n    ];\n  }\n  return [\n    { bold: boldOwner, text: ownerText },\n    { bold: false, text: t('Empty message...') },\n  ];\n};\n\nconst getLatestMessageDisplayDate = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  message: LatestMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined,\n  tDateTimeParser: TDateTimeParser,\n) => {\n  const parserOutput = tDateTimeParser(message?.created_at);\n  if (isDayOrMoment(parserOutput)) {\n    if (parserOutput.isSame(new Date(), 'day')) {\n      return parserOutput.format('LT');\n    }\n    return parserOutput.format('L');\n  }\n  return parserOutput;\n};\n\n/**\n * set up enum\n * 0 = latest message is not current user's message\n * 1 = nobody has read latest message which is the current user's message\n * 2 = someone has read latest message which is the current user's message\n */\nconst getLatestMessageReadStatus = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>,\n  message: LatestMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined,\n  readEvents: boolean,\n) => {\n  const currentUserId = client.userID;\n  if (!message || currentUserId !== message.user?.id || readEvents === false) return 0;\n\n  const readList = channel.state.read;\n  if (currentUserId) {\n    delete readList[currentUserId];\n  }\n\n  const messageUpdatedAt = message.updated_at\n    ? typeof message.updated_at === 'string'\n      ? new Date(message.updated_at)\n      : message.updated_at\n    : undefined;\n\n  return Object.values(readList).some(\n    ({ last_read }) => messageUpdatedAt && messageUpdatedAt < last_read,\n  )\n    ? 2\n    : 1;\n};\n\nconst getLatestMessagePreview = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(params: {\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;\n  readEvents: boolean;\n  t: (key: string) => string;\n  tDateTimeParser: TDateTimeParser;\n  lastMessage?:\n    | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['formatMessage']>\n    | MessageResponse<At, Ch, Co, Me, Re, Us>;\n}) => {\n  const { channel, client, lastMessage, readEvents, t, tDateTimeParser } = params;\n\n  const messages = channel.state.messages;\n\n  if (!messages.length && !lastMessage) {\n    return {\n      created_at: '',\n      messageObject: undefined,\n      previews: [\n        {\n          bold: false,\n          text: t('Nothing yet...'),\n        },\n      ],\n      status: 0,\n    };\n  }\n  const message = lastMessage || messages.length ? messages[messages.length - 1] : undefined;\n\n  return {\n    created_at: getLatestMessageDisplayDate(message, tDateTimeParser),\n    messageObject: message,\n    previews: getLatestMessageDisplayText(channel, client, message, t),\n    status: getLatestMessageReadStatus(channel, client, message, readEvents),\n  };\n};\n\n/**\n * Hook to set the display preview for latest message on channel.\n *\n * @param {*} channel Channel object\n *\n * @returns {object} latest message preview e.g.. { text: 'this was last message ...', created_at: '11/12/2020', messageObject: { originalMessageObject } }\n */\nexport const useLatestMessagePreview = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  forceUpdate: number,\n  lastMessage?:\n    | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['formatMessage']>\n    | MessageResponse<At, Ch, Co, Me, Re, Us>,\n) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { t, tDateTimeParser } = useTranslationContext();\n\n  const channelConfigExists = typeof channel?.getConfig === 'function';\n\n  const messages = channel.state.messages;\n  const message = messages.length ? messages[messages.length - 1] : undefined;\n\n  const channelLastMessageString = `${lastMessage?.id || message?.id}${\n    lastMessage?.updated_at || message?.updated_at\n  }`;\n\n  const [readEvents, setReadEvents] = useState(true);\n  const [latestMessagePreview, setLatestMessagePreview] = useState<\n    LatestMessagePreview<At, Ch, Co, Ev, Me, Re, Us>\n  >({\n    created_at: '',\n    messageObject: undefined,\n    previews: [\n      {\n        bold: false,\n        text: '',\n      },\n    ],\n    status: 0,\n  });\n\n  const readStatus = getLatestMessageReadStatus(\n    channel,\n    client,\n    lastMessage || message,\n    readEvents,\n  );\n\n  useEffect(() => {\n    if (channelConfigExists) {\n      const read_events = channel.getConfig()?.read_events;\n      if (typeof read_events === 'boolean') {\n        setReadEvents(read_events);\n      }\n    }\n  }, [channelConfigExists]);\n\n  useEffect(\n    () =>\n      setLatestMessagePreview(\n        getLatestMessagePreview({\n          channel,\n          client,\n          lastMessage,\n          readEvents,\n          t,\n          tDateTimeParser,\n        }),\n      ),\n    [channelLastMessageString, forceUpdate, readEvents, readStatus],\n  );\n\n  return latestMessagePreview;\n};\n"]}