{"version":3,"sources":["useChannelPreviewDisplayName.ts"],"names":["maxCharacterLengthDefault","getChannelPreviewDisplayName","channelName","currentUserId","maxCharacterLength","members","channelMembers","Object","values","otherMembers","filter","member","user","id","name","slice","reduce","returnString","currentMember","index","originalArray","returnStringLength","length","currentMemberName","remainingMembers","splice","useChannelPreviewDisplayName","channel","characterLength","client","userID","state","numOfMembers","keys","data","displayName","setDisplayName"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\n\nimport { vw } from '../../../utils/utils';\n\nimport type { Channel } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst maxCharacterLengthDefault = (vw(100) - 16) / 6;\n\nexport const getChannelPreviewDisplayName = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  channelName,\n  currentUserId,\n  maxCharacterLength,\n  members,\n}: {\n  maxCharacterLength: number;\n  channelName?: string;\n  currentUserId?: string;\n  members?: Channel<At, Ch, Co, Ev, Me, Re, Us>['state']['members'];\n}) => {\n  if (channelName) return channelName;\n\n  const channelMembers = Object.values(members || {});\n  const otherMembers = channelMembers.filter((member) => member.user?.id !== currentUserId);\n\n  const name = otherMembers.slice(0).reduce((returnString, currentMember, index, originalArray) => {\n    const returnStringLength = returnString.length;\n    const currentMemberName = currentMember.user?.name || currentMember.user?.id || 'Unknown User';\n    // a rough approximation of when the +Number shows up\n    if (returnStringLength + (currentMemberName.length + 2) < maxCharacterLength) {\n      if (returnStringLength) {\n        returnString += `, ${currentMemberName}`;\n      } else {\n        returnString = currentMemberName;\n      }\n    } else {\n      const remainingMembers = originalArray.length - index;\n      returnString += `, +${remainingMembers}`;\n      originalArray.splice(1); // exit early\n    }\n    return returnString;\n  }, '');\n\n  return name;\n};\n\nexport const useChannelPreviewDisplayName = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  channel?: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  characterLength?: number,\n) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const currentUserId = client.userID;\n  const members = channel?.state.members;\n  const numOfMembers = Object.keys(members || {}).length;\n  const channelName = channel?.data?.name;\n  const maxCharacterLength = characterLength || maxCharacterLengthDefault;\n\n  const [displayName, setDisplayName] = useState(\n    getChannelPreviewDisplayName({\n      channelName,\n      currentUserId,\n      maxCharacterLength,\n      members,\n    }),\n  );\n\n  useEffect(() => {\n    setDisplayName(\n      getChannelPreviewDisplayName({\n        channelName,\n        currentUserId,\n        maxCharacterLength,\n        members,\n      }),\n    );\n  }, [channelName, currentUserId, maxCharacterLength, numOfMembers]);\n\n  return displayName;\n};\n"]}