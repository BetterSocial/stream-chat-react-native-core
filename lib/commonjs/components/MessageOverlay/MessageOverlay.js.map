{"version":3,"sources":["MessageOverlay.tsx"],"names":["styles","StyleSheet","create","alignEnd","alignItems","alignStart","center","flexGrow","justifyContent","containerInner","borderTopLeftRadius","borderTopRightRadius","borderWidth","overflow","flex","overlayPadding","padding","replyContainer","flexDirection","paddingHorizontal","paddingTop","row","scrollView","Platform","OS","screenHeight","halfScreenHeight","MessageOverlayWithContext","props","alignment","clientId","files","groupStyles","handleReaction","images","message","messageActions","MessageActions","DefaultMessageActions","messageContext","messageReactionTitle","messagesContext","onlyEmojis","otherAttachments","overlay","overlayOpacity","OverlayReactionList","OverlayReactionListDefault","OverlayReactions","DefaultOverlayReactions","reset","setOverlay","threadList","visible","theme","myMessageTheme","wrapMessageInTheme","user","id","JSON","stringify","myMessageThemeString","setMyMessageThemeString","reactionListHeight","setReactionListHeight","modifiedTheme","style","colors","blue_alice","grey_gainsboro","grey_whisper","transparent","white_smoke","messageSimple","content","container","borderRadiusL","borderRadiusS","messageHeight","messageLayout","x","y","messageWidth","offsetY","translateY","scale","showScreen","fadeScreen","show","value","damping","mass","restDisplacementThreshold","restSpeedThreshold","stiffness","velocity","duration","easing","Easing","out","ease","Keyboard","dismiss","onPan","onActive","evt","translationY","Extrapolate","CLAMP","onFinish","finalYPosition","velocityY","onStart","panStyle","transform","showScreenStyle","translateX","groupStyle","toLowerCase","hasThreadReplies","reply_count","Attachment","FileAttachmentGroup","Gallery","MessageAvatar","Reply","absoluteFillObject","state","nativeEvent","State","END","own_reactions","map","reaction","type","layout","layoutHeight","height","layoutWidth","width","showAvatar","backgroundColor","quoted_message","length","borderBottomLeftRadius","borderBottomRightRadius","borderColor","messageContentOrder","messageContentType","messageContentOrderIndex","quotedRepliesEnabled","messageContainer","maxWidth","attachment","attachmentIndex","text","actions","latest_reactions","image","name","user_id","supportedReactions","areEqual","prevProps","nextProps","prevAlignment","prevMessage","prevMessageReactionTitle","prevVisible","nextAlignment","nextMessage","nextMessageReactionTitle","nextVisible","visibleEqual","alignmentEqual","messageReactionTitleEqual","latestReactionsEqual","Array","isArray","every","index","MemoizedMessageOverlay","React","memo","MessageOverlay","data","componentProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Keyboard, Platform, SafeAreaView, StyleSheet, View, ViewStyle } from 'react-native';\nimport Animated, {\n  cancelAnimation,\n  Easing,\n  Extrapolate,\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useSharedValue,\n  withDecay,\n  withSpring,\n  withTiming,\n} from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  ScrollView,\n  State,\n  TapGestureHandler,\n} from 'react-native-gesture-handler';\n\nimport { OverlayReactionList as OverlayReactionListDefault } from './OverlayReactionList';\n\nimport { MessageTextContainer } from '../Message/MessageSimple/MessageTextContainer';\nimport { MessageActions as DefaultMessageActions } from '../MessageOverlay/MessageActions';\nimport { OverlayReactions as DefaultOverlayReactions } from '../MessageOverlay/OverlayReactions';\n\nimport {\n  MessageOverlayContextValue,\n  MessageOverlayData,\n  useMessageOverlayContext,\n} from '../../contexts/messageOverlayContext/MessageOverlayContext';\nimport { MessagesProvider } from '../../contexts/messagesContext/MessagesContext';\nimport {\n  OverlayContextValue,\n  useOverlayContext,\n} from '../../contexts/overlayContext/OverlayContext';\nimport { mergeThemes, ThemeProvider, useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { vh, vw } from '../../utils/utils';\n\nimport type { ReplyProps } from '../Reply/Reply';\n\nimport { MessageProvider } from '../../contexts/messageContext/MessageContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst styles = StyleSheet.create({\n  alignEnd: { alignItems: 'flex-end' },\n  alignStart: { alignItems: 'flex-start' },\n  center: {\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  containerInner: {\n    borderTopLeftRadius: 16,\n    borderTopRightRadius: 16,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  flex: {\n    flex: 1,\n  },\n  overlayPadding: {\n    padding: 8,\n  },\n  replyContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 8,\n    paddingTop: 8,\n  },\n  row: { flexDirection: 'row' },\n  scrollView: { overflow: Platform.OS === 'ios' ? 'visible' : 'scroll' },\n});\n\nconst screenHeight = vh(100);\nconst halfScreenHeight = vh(50);\n\nexport type MessageOverlayPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n> = Pick<\n  MessageOverlayContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n  'MessageActions' | 'OverlayReactionList' | 'OverlayReactions' | 'reset'\n> &\n  Omit<MessageOverlayData<At, Ch, Co, Ev, Me, Re, Us>, 'supportedReactions'> &\n  Pick<OverlayContextValue, 'overlay' | 'setOverlay'> & {\n    overlayOpacity: Animated.SharedValue<number>;\n    visible?: boolean;\n  };\n\nconst MessageOverlayWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  props: MessageOverlayPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    alignment,\n    clientId,\n    files,\n    groupStyles,\n    handleReaction,\n    images,\n    message,\n    messageActions,\n    MessageActions = DefaultMessageActions,\n    messageContext,\n    messageReactionTitle,\n    messagesContext,\n    onlyEmojis,\n    otherAttachments,\n    overlay,\n    overlayOpacity,\n    OverlayReactionList = OverlayReactionListDefault,\n    OverlayReactions = DefaultOverlayReactions,\n    reset,\n    setOverlay,\n    threadList,\n    visible,\n  } = props;\n\n  const { theme } = useTheme();\n\n  const myMessageTheme = messagesContext?.myMessageTheme;\n  const wrapMessageInTheme = clientId === message?.user?.id && !!myMessageTheme;\n\n  const [myMessageThemeString, setMyMessageThemeString] = useState(JSON.stringify(myMessageTheme));\n  const [reactionListHeight, setReactionListHeight] = useState(0);\n\n  useEffect(() => {\n    if (myMessageTheme) {\n      setMyMessageThemeString(JSON.stringify(myMessageTheme));\n    }\n  }, [myMessageTheme]);\n\n  const modifiedTheme = useMemo(\n    () => mergeThemes({ style: myMessageTheme, theme }),\n    [myMessageThemeString, theme],\n  );\n\n  const {\n    colors: { blue_alice, grey_gainsboro, grey_whisper, transparent, white_smoke },\n    messageSimple: {\n      content: {\n        container: { borderRadiusL, borderRadiusS },\n        containerInner,\n        replyContainer,\n      },\n    },\n  } = wrapMessageInTheme ? modifiedTheme : theme;\n\n  const messageHeight = useSharedValue(0);\n  const messageLayout = useSharedValue({ x: 0, y: 0 });\n  const messageWidth = useSharedValue(0);\n\n  const offsetY = useSharedValue(0);\n  const translateY = useSharedValue(0);\n  const scale = useSharedValue(1);\n\n  const showScreen = useSharedValue(0);\n  const fadeScreen = (show: boolean) => {\n    'worklet';\n    if (show) {\n      offsetY.value = 0;\n      translateY.value = 0;\n      scale.value = 1;\n    }\n    showScreen.value = show\n      ? withSpring(1, {\n          damping: 600,\n          mass: 0.5,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          stiffness: 200,\n          velocity: 32,\n        })\n      : withTiming(\n          0,\n          {\n            duration: 150,\n            easing: Easing.out(Easing.ease),\n          },\n          () => {\n            if (!show) {\n              runOnJS(reset)();\n            }\n          },\n        );\n  };\n\n  useEffect(() => {\n    if (visible) {\n      Keyboard.dismiss();\n    }\n    fadeScreen(!!visible);\n  }, [visible]);\n\n  const onPan = useAnimatedGestureHandler<PanGestureHandlerGestureEvent>({\n    onActive: (evt) => {\n      translateY.value = offsetY.value + evt.translationY;\n      overlayOpacity.value = interpolate(\n        translateY.value,\n        [0, halfScreenHeight],\n        [1, 0.75],\n        Extrapolate.CLAMP,\n      );\n      scale.value = interpolate(\n        translateY.value,\n        [0, halfScreenHeight],\n        [1, 0.85],\n        Extrapolate.CLAMP,\n      );\n    },\n    onFinish: (evt) => {\n      const finalYPosition = evt.translationY + evt.velocityY * 0.1;\n\n      if (finalYPosition > halfScreenHeight && translateY.value > 0) {\n        cancelAnimation(translateY);\n        overlayOpacity.value = withTiming(\n          0,\n          {\n            duration: 200,\n            easing: Easing.out(Easing.ease),\n          },\n          () => {\n            runOnJS(setOverlay)('none');\n          },\n        );\n        translateY.value =\n          evt.velocityY > 1000\n            ? withDecay({\n                velocity: evt.velocityY,\n              })\n            : withTiming(screenHeight, {\n                duration: 200,\n                easing: Easing.out(Easing.ease),\n              });\n      } else {\n        translateY.value = withTiming(0);\n        scale.value = withTiming(1);\n        overlayOpacity.value = withTiming(1);\n      }\n    },\n    onStart: () => {\n      cancelAnimation(translateY);\n      offsetY.value = translateY.value;\n    },\n  });\n\n  const panStyle = useAnimatedStyle<ViewStyle>(() => ({\n    transform: [\n      {\n        translateY: translateY.value,\n      },\n      {\n        scale: scale.value,\n      },\n    ],\n  }));\n\n  const showScreenStyle = useAnimatedStyle<ViewStyle>(\n    () => ({\n      transform: [\n        {\n          translateY: interpolate(showScreen.value, [0, 1], [messageHeight.value / 2, 0]),\n        },\n        {\n          translateX: interpolate(\n            showScreen.value,\n            [0, 1],\n            [alignment === 'left' ? -messageWidth.value / 2 : messageWidth.value / 2, 0],\n          ),\n        },\n        {\n          scale: showScreen.value,\n        },\n      ],\n    }),\n    [alignment],\n  );\n\n  const groupStyle = `${alignment}_${(groupStyles?.[0] || 'bottom').toLowerCase()}`;\n\n  const hasThreadReplies = !!message?.reply_count;\n\n  const { Attachment, FileAttachmentGroup, Gallery, MessageAvatar, Reply } = messagesContext || {};\n\n  return (\n    <MessagesProvider<At, Ch, Co, Ev, Me, Re, Us> value={messagesContext}>\n      <MessageProvider value={messageContext}>\n        <ThemeProvider mergedStyle={wrapMessageInTheme ? modifiedTheme : theme}>\n          <Animated.View\n            pointerEvents={visible ? 'auto' : 'none'}\n            style={StyleSheet.absoluteFillObject}\n          >\n            <PanGestureHandler\n              enabled={overlay === 'message'}\n              maxPointers={1}\n              minDist={10}\n              onGestureEvent={onPan}\n            >\n              <Animated.View style={[StyleSheet.absoluteFillObject]}>\n                <SafeAreaView style={styles.flex}>\n                  <ScrollView\n                    alwaysBounceVertical={false}\n                    contentContainerStyle={[\n                      styles.center,\n                      {\n                        paddingTop: reactionListHeight,\n                      },\n                    ]}\n                    showsVerticalScrollIndicator={false}\n                    style={[styles.flex, styles.scrollView]}\n                  >\n                    <TapGestureHandler\n                      maxDist={32}\n                      onHandlerStateChange={({ nativeEvent: { state } }) => {\n                        if (state === State.END) {\n                          setOverlay('none');\n                        }\n                      }}\n                    >\n                      <Animated.View style={[styles.flex, panStyle]}>\n                        {message && (\n                          <View\n                            style={[\n                              styles.center,\n                              styles.overlayPadding,\n                              alignment === 'left' ? styles.alignStart : styles.alignEnd,\n                            ]}\n                          >\n                            {handleReaction ? (\n                              <OverlayReactionList\n                                messageLayout={messageLayout}\n                                ownReactionTypes={\n                                  message?.own_reactions?.map((reaction) => reaction.type) || []\n                                }\n                                setReactionListHeight={setReactionListHeight}\n                                showScreen={showScreen}\n                              />\n                            ) : null}\n                            <Animated.View\n                              onLayout={({\n                                nativeEvent: {\n                                  layout: { height: layoutHeight, width: layoutWidth, x, y },\n                                },\n                              }) => {\n                                messageLayout.value = {\n                                  x: alignment === 'left' ? x + layoutWidth : x,\n                                  y,\n                                };\n                                messageWidth.value = layoutWidth;\n                                messageHeight.value = layoutHeight;\n                              }}\n                              style={[styles.alignEnd, styles.row, showScreenStyle]}\n                            >\n                              {alignment === 'left' && MessageAvatar && (\n                                <MessageAvatar {...{ alignment, message, showAvatar: true }} />\n                              )}\n                              <View\n                                style={[\n                                  styles.containerInner,\n                                  {\n                                    backgroundColor:\n                                      onlyEmojis && !message.quoted_message\n                                        ? transparent\n                                        : otherAttachments?.length\n                                        ? otherAttachments[0].type === 'giphy'\n                                          ? !message.quoted_message\n                                            ? transparent\n                                            : grey_gainsboro\n                                          : blue_alice\n                                        : alignment === 'left'\n                                        ? white_smoke\n                                        : grey_gainsboro,\n                                    borderBottomLeftRadius:\n                                      (groupStyle === 'left_bottom' ||\n                                        groupStyle === 'left_single') &&\n                                      (!hasThreadReplies || threadList)\n                                        ? borderRadiusS\n                                        : borderRadiusL,\n                                    borderBottomRightRadius:\n                                      (groupStyle === 'right_bottom' ||\n                                        groupStyle === 'right_single') &&\n                                      (!hasThreadReplies || threadList)\n                                        ? borderRadiusS\n                                        : borderRadiusL,\n                                    borderColor: grey_whisper,\n                                  },\n                                  (onlyEmojis && !message.quoted_message) ||\n                                  otherAttachments?.length\n                                    ? { borderWidth: 0 }\n                                    : {},\n                                  containerInner,\n                                ]}\n                              >\n                                {messagesContext?.messageContentOrder?.map(\n                                  (messageContentType, messageContentOrderIndex) => {\n                                    switch (messageContentType) {\n                                      case 'quoted_reply':\n                                        return (\n                                          messagesContext?.quotedRepliesEnabled &&\n                                          message.quoted_message &&\n                                          Reply && (\n                                            <View\n                                              key={`quoted_reply_${messageContentOrderIndex}`}\n                                              style={[styles.replyContainer, replyContainer]}\n                                            >\n                                              <Reply\n                                                quotedMessage={\n                                                  message.quoted_message as ReplyProps<\n                                                    At,\n                                                    Ch,\n                                                    Co,\n                                                    Ev,\n                                                    Me,\n                                                    Re,\n                                                    Us\n                                                  >['quotedMessage']\n                                                }\n                                                styles={{\n                                                  messageContainer: {\n                                                    maxWidth: vw(60),\n                                                  },\n                                                }}\n                                              />\n                                            </View>\n                                          )\n                                        );\n                                      case 'attachments':\n                                        return otherAttachments?.map(\n                                          (attachment, attachmentIndex) =>\n                                            Attachment && (\n                                              <Attachment\n                                                attachment={attachment}\n                                                key={`${message.id}-${attachmentIndex}`}\n                                              />\n                                            ),\n                                        );\n                                      case 'files':\n                                        return (\n                                          FileAttachmentGroup && (\n                                            <FileAttachmentGroup\n                                              files={files}\n                                              key={`file_attachment_group_${messageContentOrderIndex}`}\n                                              messageId={message.id}\n                                            />\n                                          )\n                                        );\n                                      case 'gallery':\n                                        return (\n                                          Gallery && (\n                                            <Gallery\n                                              alignment={alignment}\n                                              groupStyles={groupStyles}\n                                              hasThreadReplies={!!message?.reply_count}\n                                              images={images}\n                                              key={`gallery_${messageContentOrderIndex}`}\n                                              messageId={message.id}\n                                              messageText={message.text}\n                                              threadList={threadList}\n                                            />\n                                          )\n                                        );\n                                      case 'text':\n                                      default:\n                                        return otherAttachments?.length &&\n                                          otherAttachments[0].actions ? null : (\n                                          <MessageTextContainer<At, Ch, Co, Ev, Me, Re, Us>\n                                            key={`message_text_container_${messageContentOrderIndex}`}\n                                            message={message}\n                                            messageOverlay\n                                            onlyEmojis={onlyEmojis}\n                                          />\n                                        );\n                                    }\n                                  },\n                                )}\n                              </View>\n                            </Animated.View>\n                            {messageActions && <MessageActions showScreen={showScreen} />}\n                            {!!messageReactionTitle &&\n                            message.latest_reactions &&\n                            message.latest_reactions.length > 0 ? (\n                              <OverlayReactions\n                                alignment={alignment}\n                                reactions={message.latest_reactions.map((reaction) => ({\n                                  alignment:\n                                    clientId && clientId === reaction.user?.id ? 'right' : 'left',\n                                  image: reaction?.user?.image,\n                                  name: reaction?.user?.name || reaction.user_id || '',\n                                  type: reaction.type,\n                                }))}\n                                showScreen={showScreen}\n                                supportedReactions={messagesContext?.supportedReactions}\n                                title={messageReactionTitle}\n                              />\n                            ) : null}\n                          </View>\n                        )}\n                      </Animated.View>\n                    </TapGestureHandler>\n                  </ScrollView>\n                </SafeAreaView>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </ThemeProvider>\n      </MessageProvider>\n    </MessagesProvider>\n  );\n};\n\nconst areEqual = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  prevProps: MessageOverlayPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n  nextProps: MessageOverlayPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    alignment: prevAlignment,\n    message: prevMessage,\n    messageReactionTitle: prevMessageReactionTitle,\n    visible: prevVisible,\n  } = prevProps;\n  const {\n    alignment: nextAlignment,\n    message: nextMessage,\n    messageReactionTitle: nextMessageReactionTitle,\n    visible: nextVisible,\n  } = nextProps;\n\n  const visibleEqual = prevVisible === nextVisible;\n  if (!visibleEqual) return false;\n\n  const alignmentEqual = prevAlignment === nextAlignment;\n  if (!alignmentEqual) return false;\n\n  const messageReactionTitleEqual = prevMessageReactionTitle === nextMessageReactionTitle;\n  if (!messageReactionTitleEqual) return false;\n\n  const latestReactionsEqual =\n    Array.isArray(prevMessage?.latest_reactions) && Array.isArray(nextMessage?.latest_reactions)\n      ? prevMessage?.latest_reactions.length === nextMessage?.latest_reactions.length &&\n        prevMessage?.latest_reactions.every(\n          ({ type }, index) => type === nextMessage?.latest_reactions?.[index].type,\n        )\n      : prevMessage?.latest_reactions === nextMessage?.latest_reactions;\n  if (!latestReactionsEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageOverlay = React.memo(\n  MessageOverlayWithContext,\n  areEqual,\n) as typeof MessageOverlayWithContext;\n\nexport type MessageOverlayProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n> = Partial<Omit<MessageOverlayPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>, 'overlayOpacity'>> &\n  Pick<MessageOverlayPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>, 'overlayOpacity'>;\n\n/**\n * MessageOverlay - A high level component which implements all the logic required for a message overlay\n */\nexport const MessageOverlay = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  props: MessageOverlayProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { data, MessageActions, OverlayReactionList, OverlayReactions, reset } =\n    useMessageOverlayContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { overlay, setOverlay } = useOverlayContext();\n\n  const componentProps = {\n    MessageActions: props.MessageActions || MessageActions,\n    OverlayReactionList:\n      props.OverlayReactionList || OverlayReactionList || data?.OverlayReactionList,\n    OverlayReactions: props.OverlayReactions || OverlayReactions,\n  };\n\n  return (\n    <MemoizedMessageOverlay\n      {...(data || {})}\n      {...{\n        overlay,\n        reset,\n        setOverlay,\n      }}\n      {...props}\n      {...componentProps}\n    />\n  );\n};\n"]}