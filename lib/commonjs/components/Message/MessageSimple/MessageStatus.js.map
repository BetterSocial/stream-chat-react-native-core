{"version":3,"sources":["MessageStatus.tsx"],"names":["styles","StyleSheet","create","readByCount","fontSize","fontWeight","paddingRight","statusContainer","alignItems","flexDirection","justifyContent","MessageStatusWithContext","props","message","readEventsEnabled","threadList","theme","accent_blue","colors","messageSimple","status","checkAllIcon","checkIcon","timeIcon","readBy","color","type","areEqual","prevProps","nextProps","prevMessage","prevReadEventsEnabled","prevThreadList","nextMessage","nextReadEventsEnabled","nextThreadList","threadListEqual","readEventsEnabledEqual","messageEqual","MemoizedMessageStatus","React","memo","MessageStatus","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { isMessageWithStylesReadByAndDateSeparator } from '../../MessageList/hooks/useMessageList';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport { Check } from '../../../icons/Check';\nimport { CheckAll } from '../../../icons/CheckAll';\nimport { Time } from '../../../icons/Time';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  readByCount: {\n    fontSize: 11,\n    fontWeight: '700',\n    paddingRight: 3,\n  },\n  statusContainer: {\n    alignItems: 'flex-end',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingRight: 3,\n  },\n});\n\nexport type MessageStatusPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n> = Pick<\n  MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n  'message' | 'readEventsEnabled' | 'threadList'\n>;\n\nconst MessageStatusWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  props: MessageStatusPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { message, readEventsEnabled, threadList } = props;\n\n  const {\n    theme: {\n      colors: { accent_blue },\n      messageSimple: {\n        status: { checkAllIcon, checkIcon, readByCount, statusContainer, timeIcon },\n      },\n    },\n  } = useTheme();\n\n  if (message.status === 'sending') {\n    return (\n      <View style={[styles.statusContainer, statusContainer]} testID='sending-container'>\n        <Time {...timeIcon} />\n      </View>\n    );\n  }\n\n  if (\n    isMessageWithStylesReadByAndDateSeparator(message) &&\n    !threadList &&\n    readEventsEnabled !== false\n  ) {\n    return (\n      <View style={[styles.statusContainer, statusContainer]}>\n        {typeof message.readBy === 'number' ? (\n          <Text\n            style={[styles.readByCount, { color: accent_blue }, readByCount]}\n            testID='read-by-container'\n          >\n            {message.readBy}\n          </Text>\n        ) : null}\n        {typeof message.readBy === 'number' || message.readBy === true ? (\n          <CheckAll pathFill={accent_blue} {...checkAllIcon} />\n        ) : (\n          <Check {...checkIcon} />\n        )}\n      </View>\n    );\n  }\n\n  if (message.status === 'received' && message.type !== 'ephemeral' && !threadList) {\n    return (\n      <View style={[styles.statusContainer, statusContainer]} testID='delivered-container'>\n        <Check {...checkIcon} />\n      </View>\n    );\n  }\n\n  return null;\n};\n\nconst areEqual = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  prevProps: MessageStatusPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n  nextProps: MessageStatusPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    message: prevMessage,\n    readEventsEnabled: prevReadEventsEnabled,\n    threadList: prevThreadList,\n  } = prevProps;\n  const {\n    message: nextMessage,\n    readEventsEnabled: nextReadEventsEnabled,\n    threadList: nextThreadList,\n  } = nextProps;\n\n  const threadListEqual = prevThreadList === nextThreadList;\n  if (!threadListEqual) return false;\n\n  const readEventsEnabledEqual = prevReadEventsEnabled === nextReadEventsEnabled;\n  if (!readEventsEnabledEqual) return false;\n\n  const messageEqual =\n    prevMessage.status === nextMessage.status &&\n    prevMessage.type === nextMessage.type &&\n    (isMessageWithStylesReadByAndDateSeparator(prevMessage) && prevMessage.readBy) ===\n      (isMessageWithStylesReadByAndDateSeparator(nextMessage) && nextMessage.readBy);\n  if (!messageEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageStatus = React.memo(\n  MessageStatusWithContext,\n  areEqual,\n) as typeof MessageStatusWithContext;\n\nexport type MessageStatusProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n> = Partial<MessageStatusPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>>;\n\nexport const MessageStatus = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  props: MessageStatusProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { message, readEventsEnabled, threadList } =\n    useMessageContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  return <MemoizedMessageStatus {...{ message, readEventsEnabled, threadList }} {...props} />;\n};\n\nMessageStatus.displayName = 'MessageStatus{messageSimple{status}}';\n"]}