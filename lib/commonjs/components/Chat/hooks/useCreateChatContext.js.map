{"version":3,"sources":["useCreateChatContext.ts"],"names":["useCreateChatContext","channel","client","connectionRecovering","isOnline","mutedUsers","setActiveChannel","channelId","id","clientValues","clientID","Object","keys","activeChannels","length","listeners","mutedChannels","mutedUsersLength","chatContext"],"mappings":";;;;;AAAA;;AAcO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,OAegB;AAAA,MANlDC,OAMkD,QANlDA,OAMkD;AAAA,MALlDC,MAKkD,QALlDA,MAKkD;AAAA,MAJlDC,oBAIkD,QAJlDA,oBAIkD;AAAA,MAHlDC,QAGkD,QAHlDA,QAGkD;AAAA,MAFlDC,UAEkD,QAFlDA,UAEkD;AAAA,MADlDC,gBACkD,QADlDA,gBACkD;AAClD,MAAMC,SAAS,GAAGN,OAAH,oBAAGA,OAAO,CAAEO,EAA3B;AACA,MAAMC,YAAY,QAAMP,MAAM,CAACQ,QAAb,GAAwBC,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACW,cAAnB,EAAmCC,MAA3D,GAChBH,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACa,SAAnB,EAA8BD,MADd,GAEfZ,MAAM,CAACc,aAAP,CAAqBF,MAFxB;AAGA,MAAMG,gBAAgB,GAAGZ,UAAU,CAACS,MAApC;AAEA,MAAMI,WAAyD,GAAG,oBAChE;AAAA,WAAO;AACLjB,MAAAA,OAAO,EAAPA,OADK;AAELC,MAAAA,MAAM,EAANA,MAFK;AAGLC,MAAAA,oBAAoB,EAApBA,oBAHK;AAILC,MAAAA,QAAQ,EAARA,QAJK;AAKLC,MAAAA,UAAU,EAAVA,UALK;AAMLC,MAAAA,gBAAgB,EAAhBA;AANK,KAAP;AAAA,GADgE,EAShE,CAACC,SAAD,EAAYE,YAAZ,EAA0BN,oBAA1B,EAAgDC,QAAhD,EAA0Da,gBAA1D,CATgE,CAAlE;AAYA,SAAOC,WAAP;AACD,CAnCM","sourcesContent":["import { useMemo } from 'react';\n\nimport type { ChatContextValue } from '../../../contexts/chatContext/ChatContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useCreateChatContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  channel,\n  client,\n  connectionRecovering,\n  isOnline,\n  mutedUsers,\n  setActiveChannel,\n}: ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const channelId = channel?.id;\n  const clientValues = `${client.clientID}${Object.keys(client.activeChannels).length}${\n    Object.keys(client.listeners).length\n  }${client.mutedChannels.length}`;\n  const mutedUsersLength = mutedUsers.length;\n\n  const chatContext: ChatContextValue<At, Ch, Co, Ev, Me, Re, Us> = useMemo(\n    () => ({\n      channel,\n      client,\n      connectionRecovering,\n      isOnline,\n      mutedUsers,\n      setActiveChannel,\n    }),\n    [channelId, clientValues, connectionRecovering, isOnline, mutedUsersLength],\n  );\n\n  return chatContext;\n};\n"]}