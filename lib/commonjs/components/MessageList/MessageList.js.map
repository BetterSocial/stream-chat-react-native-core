{"version":3,"sources":["MessageList.tsx"],"names":["styles","StyleSheet","create","container","alignItems","flex","width","contentContainer","flexGrow","paddingBottom","invert","transform","scaleY","listContainer","messagePadding","paddingHorizontal","stickyHeader","position","top","keyExtractor","item","id","created_at","toISOString","Date","now","toString","flatListViewabilityConfig","viewAreaCoveragePercentThreshold","MessageListWithContext","props","LoadingMoreIndicator","threadList","InlineLoadingMoreThreadIndicator","InlineLoadingMoreIndicator","additionalFlatListProps","channel","client","closePicker","DateHeader","disabled","disableTypingIndicator","EmptyStateIndicator","FlatList","FooterComponent","HeaderComponent","InlineLoadingMoreRecentIndicator","hideStickyDateHeader","initialScrollToFirstUnreadMessage","InlineDateSeparator","InlineUnreadIndicator","inverted","legacyImageViewerSwipeBehaviour","loadChannelAtMessage","loading","LoadingIndicator","loadMore","loadMoreRecent","loadMoreThread","markRead","Message","MessageSystem","myMessageTheme","NetworkDownIndicator","noGroupByUser","onListScroll","onThreadSelect","overlay","reloadChannel","ScrollToBottomButton","scrollToFirstUnreadThreshold","selectedPicker","setFlatListRef","setImages","setSelectedPicker","setTargetedMessage","StickyHeader","targetedMessage","tDateTimeParser","thread","typingEventsEnabled","TypingIndicator","TypingIndicatorContainer","theme","white_snow","colors","messageList","modifiedTheme","style","messageListLengthBeforeUpdate","messageListLengthAfterUpdate","length","topMessageBeforeUpdate","topMessageAfterUpdate","autoscrollToTop","setAutoscrollToTop","onStartReachedTracker","onEndReachedTracker","onStartReachedInPromise","onEndReachedInPromise","flatListRef","initialScrollSet","channelResyncScrollSet","hasMoved","setHasMoved","lastReceivedId","setLastReceivedId","scrollToBottomButtonVisible","setScrollToBottomButtonVisible","stickyHeaderDate","setStickyHeaderDate","stickyHeaderDateRef","getLastReadSafely","initialized","lastRead","undefined","channelLastRead","isUnreadMessage","message","setInitialScrollIfNeeded","current","scrollToEnd","setTimeout","updateStickyHeaderDateIfNeeded","viewableItems","lastItem","pop","deleted_at","toDateString","onViewableItemsChanged","resetPaginationTrackers","shouldMarkReadOnFirstLoad","countUnread","lastReceivedMessage","hasNewMessage","isMyMessage","user","userID","scrollToBottomIfNeeded","scrollToOffset","offset","state","isUpToDate","maybeCallOnStartReached","renderItem","index","lastMessage","showUnreadUnderlay","insertInlineUnreadIndicator","type","wrapMessageInTheme","goToMessage","groupStyles","dateSeparator","quoted_message_id","limit","callback","Promise","resolve","onError","then","maybeCallOnEndReached","handleScroll","event","nativeEvent","contentOffset","y","visibleLength","layoutMeasurement","height","contentLength","contentSize","isScrollAtStart","isScrollAtEnd","isScrollAtBottom","showScrollToBottomButton","shouldMarkRead","goToNewMessages","messageId","indexOfParentInMessageList","findIndex","scrollToIndex","viewPosition","_","messagesWithImages","filter","attachments","some","attachment","title_link","og_scrape_url","image_url","thumb_url","imageString","map","join","numberOfMessagesWithImages","threadExists","stickyHeaderFormatDate","getFullYear","tStickyHeaderDate","stickyHeaderDateToRender","format","dismissImagePicker","onScrollBeginDrag","onScrollEndDrag","refCallback","ref","renderListEmptyComponent","backgroundColor","autoscrollToTopThreshold","minIndexForVisible","MessageList","enableMessageGroupingByUser","error","t"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  FlatListProps,\n  FlatList as FlatListType,\n  ScrollViewProps,\n  StyleSheet,\n  View,\n  ViewToken,\n} from 'react-native';\n\nimport {\n  isMessageWithStylesReadByAndDateSeparator,\n  MessageType,\n  useMessageList,\n} from './hooks/useMessageList';\nimport { InlineLoadingMoreIndicator } from './InlineLoadingMoreIndicator';\nimport { InlineLoadingMoreRecentIndicator } from './InlineLoadingMoreRecentIndicator';\nimport { InlineLoadingMoreThreadIndicator } from './InlineLoadingMoreThreadIndicator';\nimport { getLastReceivedMessage } from './utils/getLastReceivedMessage';\n\nimport {\n  AttachmentPickerContextValue,\n  useAttachmentPickerContext,\n} from '../../contexts/attachmentPickerContext/AttachmentPickerContext';\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  ImageGalleryContextValue,\n  useImageGalleryContext,\n} from '../../contexts/imageGalleryContext/ImageGalleryContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\nimport {\n  OverlayContextValue,\n  useOverlayContext,\n} from '../../contexts/overlayContext/OverlayContext';\nimport {\n  PaginatedMessageListContextValue,\n  usePaginatedMessageListContext,\n} from '../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport { mergeThemes, ThemeProvider, useTheme } from '../../contexts/themeContext/ThemeContext';\nimport {\n  isDayOrMoment,\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\n\nimport type { Channel as StreamChannel } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    width: '100%',\n  },\n  contentContainer: {\n    flexGrow: 1,\n    /**\n     * paddingBottom is set to 4 to account for the default date\n     * header and inline indicator alignment. The top margin is 8\n     * on the header but 4 on the inline date, this adjusts the spacing\n     * to allow the \"first\" inline date to align with the date header.\n     */\n    paddingBottom: 4,\n  },\n  flex: { flex: 1 },\n  invert: { transform: [{ scaleY: -1 }] },\n  listContainer: {\n    flex: 1,\n    width: '100%',\n  },\n  messagePadding: {\n    paddingHorizontal: 8,\n  },\n  stickyHeader: {\n    position: 'absolute',\n    top: 0,\n  },\n});\n\nconst keyExtractor = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  item: MessageType<At, Ch, Co, Ev, Me, Re, Us>,\n) =>\n  item.id ||\n  (item.created_at\n    ? typeof item.created_at === 'string'\n      ? item.created_at\n      : item.created_at.toISOString()\n    : Date.now().toString());\n\nconst flatListViewabilityConfig = {\n  viewAreaCoveragePercentThreshold: 1,\n};\n\ntype MessageListPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Pick<AttachmentPickerContextValue, 'closePicker' | 'selectedPicker' | 'setSelectedPicker'> &\n  Pick<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n    | 'channel'\n    | 'disabled'\n    | 'EmptyStateIndicator'\n    | 'hideStickyDateHeader'\n    | 'loadChannelAtMessage'\n    | 'loading'\n    | 'LoadingIndicator'\n    | 'markRead'\n    | 'NetworkDownIndicator'\n    | 'reloadChannel'\n    | 'scrollToFirstUnreadThreshold'\n    | 'setTargetedMessage'\n    | 'StickyHeader'\n    | 'targetedMessage'\n    | 'typingEventsEnabled'\n  > &\n  Pick<ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'client'> &\n  Pick<ImageGalleryContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'setImages'> &\n  Pick<\n    PaginatedMessageListContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n    'loadMore' | 'loadMoreRecent'\n  > &\n  Pick<OverlayContextValue, 'overlay'> &\n  Pick<\n    MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n    | 'DateHeader'\n    | 'disableTypingIndicator'\n    | 'FlatList'\n    | 'initialScrollToFirstUnreadMessage'\n    | 'InlineDateSeparator'\n    | 'InlineUnreadIndicator'\n    | 'legacyImageViewerSwipeBehaviour'\n    | 'Message'\n    | 'ScrollToBottomButton'\n    | 'MessageSystem'\n    | 'myMessageTheme'\n    | 'TypingIndicator'\n    | 'TypingIndicatorContainer'\n  > &\n  Pick<ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'loadMoreThread' | 'thread'> &\n  Pick<TranslationContextValue, 't' | 'tDateTimeParser'> & {\n    /**\n     * Besides existing (default) UX behavior of underlying FlatList of MessageList component, if you want\n     * to attach some additional props to underlying FlatList, you can add it to following prop.\n     *\n     * You can find list of all the available FlatList props here - https://facebook.github.io/react-native/docs/flatlist#props\n     *\n     * **NOTE** Don't use `additionalFlatListProps` to get access to ref of flatlist. Use `setFlatListRef` instead.\n     *\n     * e.g.\n     * ```js\n     * <MessageList\n     *  additionalFlatListProps={{ bounces: true, keyboardDismissMode: true }} />\n     * ```\n     */\n    additionalFlatListProps?: Partial<FlatListProps<MessageType<At, Ch, Co, Ev, Me, Re, Us>>>;\n    /**\n     * UI component for footer of message list. By default message list will use `InlineLoadingMoreIndicator`\n     * as FooterComponent. If you want to implement your own inline loading indicator, you can access `loadingMore`\n     * from context.\n     *\n     * This is a [ListHeaderComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n     * used in MessageList. Should be used for header by default if inverted is true or defaulted\n     */\n    FooterComponent?: React.ComponentType;\n    /**\n     * UI component for header of message list. By default message list will use `InlineLoadingMoreRecentIndicator`\n     * as HeaderComponent. If you want to implement your own inline loading indicator, you can access `loadingMoreRecent`\n     * from context.\n     *\n     * This is a [ListFooterComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n     * used in MessageList. Should be used for header if inverted is false\n     */\n    HeaderComponent?: React.ComponentType;\n    /** Whether or not the FlatList is inverted. Defaults to true */\n    inverted?: boolean;\n    /** Turn off grouping of messages by user */\n    noGroupByUser?: boolean;\n    onListScroll?: ScrollViewProps['onScroll'];\n    /**\n     * Handler to open the thread on message. This is callback for touch event for replies button.\n     *\n     * @param message A message object to open the thread upon.\n     */\n    onThreadSelect?: (message: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>['thread']) => void;\n    /**\n     * Use `setFlatListRef` to get access to ref to inner FlatList.\n     *\n     * e.g.\n     * ```js\n     * <MessageList\n     *  setFlatListRef={(ref) => {\n     *    // Use ref for your own good\n     *  }}\n     * ```\n     */\n    setFlatListRef?: (ref: FlatListType<MessageType<At, Ch, Co, Ev, Me, Re, Us>> | null) => void;\n    /**\n     * Boolean whether or not the Messages in the MessageList are part of a Thread\n     **/\n    threadList?: boolean;\n  };\n\n/**\n * The message list component renders a list of messages. It consumes the following contexts:\n *\n * [ChannelContext](https://getstream.github.io/stream-chat-react-native/v3/#channelcontext)\n * [ChatContext](https://getstream.github.io/stream-chat-react-native/v3/#chatcontext)\n * [MessagesContext](https://getstream.github.io/stream-chat-react-native/v3/#messagescontext)\n * [ThreadContext](https://getstream.github.io/stream-chat-react-native/v3/#threadcontext)\n * [TranslationContext](https://getstream.github.io/stream-chat-react-native/v3/#translationcontext)\n */\nconst MessageListWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: MessageListPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const LoadingMoreIndicator = props.threadList\n    ? InlineLoadingMoreThreadIndicator\n    : InlineLoadingMoreIndicator;\n  const {\n    additionalFlatListProps,\n    channel,\n    client,\n    closePicker,\n    DateHeader,\n    disabled,\n    disableTypingIndicator,\n    EmptyStateIndicator,\n    FlatList,\n    FooterComponent = LoadingMoreIndicator,\n    HeaderComponent = InlineLoadingMoreRecentIndicator,\n    hideStickyDateHeader,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    inverted = true,\n    legacyImageViewerSwipeBehaviour,\n    loadChannelAtMessage,\n    loading,\n    LoadingIndicator,\n    loadMore,\n    loadMoreRecent,\n    loadMoreThread,\n    markRead,\n    Message,\n    MessageSystem,\n    myMessageTheme,\n    NetworkDownIndicator,\n    noGroupByUser,\n    onListScroll,\n    onThreadSelect,\n    overlay,\n    reloadChannel,\n    ScrollToBottomButton,\n    scrollToFirstUnreadThreshold,\n    selectedPicker,\n    setFlatListRef,\n    setImages,\n    setSelectedPicker,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n    tDateTimeParser,\n    thread,\n    threadList = false,\n    typingEventsEnabled,\n    TypingIndicator,\n    TypingIndicatorContainer,\n  } = props;\n\n  const { theme } = useTheme();\n\n  const {\n    colors: { white_snow },\n    messageList: { container, contentContainer, listContainer },\n  } = theme;\n\n  const modifiedTheme = useMemo(\n    () => mergeThemes({ style: myMessageTheme, theme }),\n    [myMessageTheme, theme],\n  );\n\n  const messageList = useMessageList<At, Ch, Co, Ev, Me, Re, Us>({\n    inverted,\n    noGroupByUser,\n    threadList,\n  });\n  const messageListLengthBeforeUpdate = useRef(0);\n  const messageListLengthAfterUpdate = messageList.length;\n\n  /**\n   * We need topMessage and channelLastRead values to set the initial scroll position.\n   * So these values only get used if `initialScrollToFirstUnreadMessage` prop is true.\n   */\n  const topMessageBeforeUpdate = useRef<MessageType<At, Ch, Co, Ev, Me, Re, Us>>();\n  const topMessageAfterUpdate = messageList[messageList.length - 1];\n\n  const [autoscrollToTop, setAutoscrollToTop] = useState(false);\n\n  /**\n   * We want to call onEndReached and onStartReached only once, per content length.\n   * We keep track of calls to these functions per content length, with following trackers.\n   */\n  const onStartReachedTracker = useRef<Record<number, boolean>>({});\n  const onEndReachedTracker = useRef<Record<number, boolean>>({});\n\n  const onStartReachedInPromise = useRef<Promise<void> | null>(null);\n  const onEndReachedInPromise = useRef<Promise<void> | null>(null);\n\n  const flatListRef = useRef<FlatListType<MessageType<At, Ch, Co, Ev, Me, Re, Us>> | null>(null);\n\n  const initialScrollSet = useRef<boolean>(false);\n  const channelResyncScrollSet = useRef<boolean>(true);\n\n  const [hasMoved, setHasMoved] = useState(false);\n  const [lastReceivedId, setLastReceivedId] = useState(getLastReceivedMessage(messageList)?.id);\n  const [scrollToBottomButtonVisible, setScrollToBottomButtonVisible] = useState(false);\n\n  const [stickyHeaderDate, setStickyHeaderDate] = useState<Date | undefined>();\n  const stickyHeaderDateRef = useRef<Date | undefined>();\n  /**\n   * channel.lastRead throws error if the channel is not initialized.\n   */\n  const getLastReadSafely = () => (channel?.initialized ? channel.lastRead() : undefined);\n\n  const channelLastRead = useRef(getLastReadSafely());\n\n  const isUnreadMessage = (\n    message: MessageType<At, Ch, Co, Ev, Me, Re, Us> | undefined,\n    lastRead?: ReturnType<StreamChannel<At, Ch, Co, Ev, Me, Re, Us>['lastRead']>,\n  ) => message && lastRead && message.created_at && lastRead < message.created_at;\n\n  /**\n   * If the top message in the list is unread, then we should scroll to top of the list.\n   * This is to handle the case when entire message list is unread.\n   * This scroll get set only on load, and never again.\n   */\n  const setInitialScrollIfNeeded = () => {\n    // If the feature is disabled or initial scroll position is already set.\n    if (!initialScrollToFirstUnreadMessage || initialScrollSet.current) {\n      initialScrollSet.current = true;\n      return;\n    }\n    if (isUnreadMessage(topMessageBeforeUpdate.current, channelLastRead.current)) {\n      if (flatListRef.current) {\n        flatListRef.current.scrollToEnd();\n      }\n      setTimeout(() => {\n        initialScrollSet.current = true;\n      }, 500);\n    } else if (!initialScrollSet.current) {\n      initialScrollSet.current = true;\n    }\n  };\n\n  const updateStickyHeaderDateIfNeeded = (viewableItems: ViewToken[]) => {\n    if (viewableItems.length) {\n      const lastItem = viewableItems.pop() as {\n        item: MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n      };\n\n      if (\n        lastItem?.item?.created_at &&\n        !lastItem.item.deleted_at &&\n        typeof lastItem.item.created_at !== 'string' &&\n        lastItem.item.created_at.toDateString() !== stickyHeaderDateRef.current?.toDateString()\n      ) {\n        stickyHeaderDateRef.current = lastItem.item.created_at;\n        setStickyHeaderDate(lastItem.item.created_at);\n      }\n    }\n  };\n\n  /**\n   * FlatList doesn't accept changeable function for onViewableItemsChanged prop.\n   * Thus useRef.\n   */\n  const onViewableItemsChanged = useRef(\n    ({ viewableItems }: { viewableItems: ViewToken[] | undefined }) => {\n      if (viewableItems && !hideStickyDateHeader) {\n        updateStickyHeaderDateIfNeeded(viewableItems);\n      }\n      setInitialScrollIfNeeded();\n    },\n  );\n\n  const resetPaginationTrackers = () => {\n    onStartReachedTracker.current = {};\n    onEndReachedTracker.current = {};\n  };\n\n  useEffect(() => {\n    setScrollToBottomButtonVisible(false);\n  }, [disabled]);\n\n  useEffect(() => {\n    /**\n     * 1. !initialScrollToFirstUnreadMessage && channel.countUnread() > 0\n     *\n     *    In this case MessageList won't scroll to first unread message when opened, so we can mark\n     *    the channel as read right after opening.\n     *\n     * 2. initialScrollToFirstUnreadMessage && channel.countUnread() <= scrollToFirstUnreadThreshold\n     *\n     *    In this case MessageList will be opened to first unread message.\n     *    But if there are not enough (scrollToFirstUnreadThreshold) unread messages, then MessageList\n     *    won't need to scroll up. So we can safely mark the channel as read right after opening.\n     */\n    const shouldMarkReadOnFirstLoad =\n      !loading &&\n      channel &&\n      ((!initialScrollToFirstUnreadMessage && channel.countUnread() > 0) ||\n        (initialScrollToFirstUnreadMessage &&\n          channel.countUnread() <= scrollToFirstUnreadThreshold));\n\n    if (shouldMarkReadOnFirstLoad) {\n      markRead();\n    }\n  }, [loading]);\n\n  useEffect(() => {\n    const lastReceivedMessage = getLastReceivedMessage(messageList);\n\n    const hasNewMessage = lastReceivedId !== lastReceivedMessage?.id;\n    const isMyMessage = lastReceivedMessage?.user?.id === client.userID;\n\n    setLastReceivedId(lastReceivedMessage?.id);\n\n    /**\n     * Scroll down when\n     * 1. you send a new message to channel\n     * 2. new message list is small than the one before update - channel has resynced\n     * 3. created_at timestamp of top message before update is lesser than created_at timestamp of top message after update - channel has resynced\n     */\n    const scrollToBottomIfNeeded = () => {\n      if (!client || !channel || messageList.length === 0) {\n        return;\n      }\n\n      if (\n        (hasNewMessage && isMyMessage) ||\n        messageListLengthAfterUpdate < messageListLengthBeforeUpdate.current ||\n        (topMessageBeforeUpdate.current?.created_at &&\n          topMessageAfterUpdate?.created_at &&\n          topMessageBeforeUpdate.current.created_at < topMessageAfterUpdate.created_at)\n      ) {\n        channelResyncScrollSet.current = false;\n        setScrollToBottomButtonVisible(false);\n        resetPaginationTrackers();\n\n        setTimeout(\n          () =>\n            flatListRef.current?.scrollToOffset({\n              offset: 0,\n            }),\n          50,\n        );\n        setTimeout(() => {\n          channelResyncScrollSet.current = true;\n          if (channel.countUnread() > 0) {\n            markRead();\n          }\n        }, 500);\n      }\n    };\n\n    if (threadList || channel?.state.isUpToDate) {\n      scrollToBottomIfNeeded();\n    } else if (!scrollToBottomButtonVisible) {\n      setScrollToBottomButtonVisible(true);\n    }\n\n    if (\n      !channel?.state.isUpToDate &&\n      flatListRef.current &&\n      messageListLengthBeforeUpdate.current === 0 &&\n      messageListLengthAfterUpdate < 10\n    ) {\n      /**\n       * Trigger onStartReached on first load, if messages are not enough to fill the screen.\n       * This is important especially for android, where you can't overscroll.\n       */\n      maybeCallOnStartReached(10);\n    }\n\n    /**\n     * channelLastRead and topMessage are only used for setting initial scroll.\n     * So lets not set it if `initialScrollToFirstUnreadMessage` prop is false.\n     * OR if the scroll is already set.\n     */\n    if (initialScrollToFirstUnreadMessage && !initialScrollSet.current) {\n      channelLastRead.current = getLastReadSafely();\n    }\n\n    messageListLengthBeforeUpdate.current = messageListLengthAfterUpdate;\n    topMessageBeforeUpdate.current = topMessageAfterUpdate;\n  }, [messageListLengthAfterUpdate, topMessageAfterUpdate?.id]);\n\n  useEffect(() => {\n    if (!channel?.state.isUpToDate && autoscrollToTop) {\n      setAutoscrollToTop(false);\n    } else if (channel?.state.isUpToDate && !autoscrollToTop) {\n      setAutoscrollToTop(true);\n    }\n  }, [messageListLengthAfterUpdate]);\n\n  const renderItem = ({\n    index,\n    item: message,\n  }: {\n    index: number;\n    item: MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  }) => {\n    if (!channel || !channel.initialized) return null;\n\n    const lastRead = getLastReadSafely();\n\n    const lastMessage = messageList?.[index + 1];\n\n    const showUnreadUnderlay = !!isUnreadMessage(message, lastRead) && scrollToBottomButtonVisible;\n    const insertInlineUnreadIndicator =\n      showUnreadUnderlay && !isUnreadMessage(lastMessage, lastRead);\n\n    if (message.type === 'system') {\n      return (\n        <>\n          <MessageSystem message={message} style={styles.messagePadding} />\n          {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n        </>\n      );\n    }\n\n    const wrapMessageInTheme = client.userID === message.user?.id && !!myMessageTheme;\n    return wrapMessageInTheme ? (\n      <>\n        <ThemeProvider mergedStyle={modifiedTheme}>\n          <Message\n            goToMessage={goToMessage}\n            groupStyles={\n              isMessageWithStylesReadByAndDateSeparator(message) ? message.groupStyles : []\n            }\n            lastReceivedId={lastReceivedId === message.id ? lastReceivedId : undefined}\n            message={message}\n            onThreadSelect={onThreadSelect}\n            showUnreadUnderlay={showUnreadUnderlay}\n            style={styles.messagePadding}\n            targetedMessage={targetedMessage === message.id}\n            threadList={threadList}\n          />\n        </ThemeProvider>\n        {isMessageWithStylesReadByAndDateSeparator(message) && message.dateSeparator && (\n          <InlineDateSeparator date={message.dateSeparator} />\n        )}\n        {/* Adding indicator below the messages, since the list is inverted */}\n        {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n      </>\n    ) : (\n      <>\n        <Message\n          goToMessage={goToMessage}\n          groupStyles={\n            isMessageWithStylesReadByAndDateSeparator(message) ? message.groupStyles : []\n          }\n          lastReceivedId={\n            lastReceivedId === message.id || message.quoted_message_id ? lastReceivedId : undefined\n          }\n          message={message}\n          onThreadSelect={onThreadSelect}\n          showUnreadUnderlay={showUnreadUnderlay}\n          style={styles.messagePadding}\n          targetedMessage={targetedMessage === message.id}\n          threadList={threadList}\n        />\n        {isMessageWithStylesReadByAndDateSeparator(message) && message.dateSeparator && (\n          <InlineDateSeparator date={message.dateSeparator} />\n        )}\n        {/* Adding indicator below the messages, since the list is inverted */}\n        {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n      </>\n    );\n  };\n\n  /**\n   * We are keeping full control on message pagination, and not relying on react-native for it.\n   * The reasons being,\n   * 1. FlatList doesn't support onStartReached prop\n   * 2. `onEndReached` function prop available on react-native, gets executed\n   *    once per content length (and thats actually a nice optimization strategy).\n   *    But it also means, we always need to prioritize onEndReached above our\n   *    logic for `onStartReached`.\n   * 3. `onEndReachedThreshold` prop decides - at which scroll position to call `onEndReached`.\n   *    Its a factor of content length (which is necessary for \"real\" infinite scroll). But on\n   *    the other hand, it also makes calls to `onEndReached` (and this `channel.query`) way\n   *    too early during scroll, which we don't really need. So we are going to instead\n   *    keep some fixed offset distance, to decide when to call `loadMore` or `loadMoreRecent`.\n   *\n   * We are still gonna keep the optimization, which react-native does - only call onEndReached\n   * once per content length.\n   */\n\n  /**\n   * 1. Makes a call to `loadMoreRecent` function, which queries more recent messages.\n   * 2. Ensures that we call `loadMoreRecent`, once per content length\n   * 3. If the call to `loadMore` is in progress, we wait for it to finish to make sure scroll doesn't jump.\n   */\n  const maybeCallOnStartReached = (limit?: number) => {\n    // If onStartReached has already been called for given data length, then ignore.\n    if (messageList?.length && onStartReachedTracker.current[messageList.length]) {\n      return;\n    }\n\n    if (messageList?.length) {\n      onStartReachedTracker.current[messageList.length] = true;\n    }\n\n    const callback = () => {\n      onStartReachedInPromise.current = null;\n\n      return Promise.resolve();\n    };\n\n    const onError = () => {\n      /** Release the onStartReached trigger after 2 seconds, to try again */\n      setTimeout(() => {\n        onStartReachedTracker.current = {};\n      }, 2000);\n    };\n\n    // If onEndReached is in progress, better to wait for it to finish for smooth UX\n    if (onEndReachedInPromise.current) {\n      onEndReachedInPromise.current.finally(() => {\n        onStartReachedInPromise.current = loadMoreRecent(limit).then(callback).catch(onError);\n      });\n    } else {\n      onStartReachedInPromise.current = loadMoreRecent(limit).then(callback).catch(onError);\n    }\n  };\n\n  /**\n   * 1. Makes a call to `loadMore` function, which queries more older messages.\n   * 2. Ensures that we call `loadMore`, once per content length\n   * 3. If the call to `loadMoreRecent` is in progress, we wait for it to finish to make sure scroll doesn't jump.\n   */\n  const maybeCallOnEndReached = () => {\n    // If onEndReached has already been called for given messageList length, then ignore.\n    if (messageList?.length && onEndReachedTracker.current[messageList.length]) {\n      return;\n    }\n\n    if (messageList?.length) {\n      onEndReachedTracker.current[messageList.length] = true;\n    }\n\n    const callback = () => {\n      onEndReachedInPromise.current = null;\n      return Promise.resolve();\n    };\n\n    const onError = () => {\n      /** Release the onEndReachedTracker trigger after 2 seconds, to try again */\n      setTimeout(() => {\n        onEndReachedTracker.current = {};\n      }, 2000);\n    };\n\n    // If onStartReached is in progress, better to wait for it to finish for smooth UX\n    if (onStartReachedInPromise.current) {\n      onStartReachedInPromise.current.finally(() => {\n        onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore())\n          .then(callback)\n          .catch(onError);\n      });\n    } else {\n      onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore())\n        .then(callback)\n        .catch(onError);\n    }\n  };\n\n  /**\n   * Following if condition covers following cases:\n   * 1. If I scroll up -> show scrollToBottom button.\n   * 2. If I scroll to bottom of screen\n   *    |-> hide scrollToBottom button.\n   *    |-> if channel is unread, call markRead().\n   */\n  const handleScroll: ScrollViewProps['onScroll'] = (event) => {\n    if (!channel || !initialScrollSet.current || !channelResyncScrollSet.current) {\n      return;\n    }\n\n    const offset = event.nativeEvent.contentOffset.y;\n    const visibleLength = event.nativeEvent.layoutMeasurement.height;\n    const contentLength = event.nativeEvent.contentSize.height;\n    // Check if scroll has reached either start of end of list.\n    const isScrollAtStart = offset < 100;\n    const isScrollAtEnd = contentLength - visibleLength - offset < 100;\n\n    if (isScrollAtStart) {\n      maybeCallOnStartReached();\n    }\n\n    if (isScrollAtEnd) {\n      maybeCallOnEndReached();\n    }\n\n    // Show scrollToBottom button once scroll position goes beyond 300.\n    const isScrollAtBottom = offset <= 300;\n    const showScrollToBottomButton = !isScrollAtBottom || !channel?.state.isUpToDate;\n\n    const shouldMarkRead =\n      !threadList && offset <= 0 && channel?.state.isUpToDate && channel.countUnread() > 0;\n\n    if (shouldMarkRead) {\n      markRead();\n    }\n\n    if (showScrollToBottomButton && !scrollToBottomButtonVisible) {\n      setScrollToBottomButtonVisible(true);\n    } else if (!showScrollToBottomButton && scrollToBottomButtonVisible) {\n      setScrollToBottomButtonVisible(false);\n    }\n\n    if (onListScroll) {\n      onListScroll(event);\n    }\n  };\n\n  const goToNewMessages = async () => {\n    if (!channel?.state.isUpToDate) {\n      resetPaginationTrackers();\n\n      await reloadChannel();\n    } else if (flatListRef.current) {\n      flatListRef.current.scrollToOffset({\n        offset: 0,\n      });\n    }\n\n    setScrollToBottomButtonVisible(false);\n    if (!threadList) {\n      markRead();\n    }\n  };\n\n  const goToMessage = useCallback(\n    (messageId: string) => {\n      const indexOfParentInMessageList = messageList.findIndex(\n        (message) => message?.id === messageId,\n      );\n\n      if (indexOfParentInMessageList > -1) {\n        try {\n          if (flatListRef.current) {\n            flatListRef.current.scrollToIndex({\n              index: indexOfParentInMessageList,\n              viewPosition: 0.5,\n            });\n            setTargetedMessage(messageId);\n\n            return;\n          }\n        } catch (_) {\n          // do nothing;\n        }\n      }\n\n      loadChannelAtMessage({ messageId });\n      resetPaginationTrackers();\n    },\n    [messageListLengthAfterUpdate],\n  );\n\n  const messagesWithImages =\n    legacyImageViewerSwipeBehaviour &&\n    messageList.filter((message) => {\n      if (!message.deleted_at && message.attachments) {\n        return message.attachments.some(\n          (attachment) =>\n            attachment.type === 'image' &&\n            !attachment.title_link &&\n            !attachment.og_scrape_url &&\n            (attachment.image_url || attachment.thumb_url),\n        );\n      }\n      return false;\n    });\n\n  /**\n   * This is for the useEffect to run again in the case that a message\n   * gets edited with more or the same number of images\n   */\n  const imageString =\n    legacyImageViewerSwipeBehaviour &&\n    messagesWithImages &&\n    messagesWithImages\n      .map((message) =>\n        message.attachments\n          ?.map((attachment) => attachment.image_url || attachment.thumb_url || '')\n          .join(),\n      )\n      .join();\n\n  const numberOfMessagesWithImages =\n    legacyImageViewerSwipeBehaviour && messagesWithImages && messagesWithImages.length;\n  const threadExists = !!thread;\n\n  useEffect(() => {\n    if (legacyImageViewerSwipeBehaviour && ((threadList && thread) || (!threadList && !thread))) {\n      setImages(messagesWithImages as MessageType<At, Ch, Co, Ev, Me, Re, Us>[]);\n    }\n  }, [\n    imageString,\n    legacyImageViewerSwipeBehaviour,\n    numberOfMessagesWithImages,\n    threadExists,\n    threadList,\n  ]);\n\n  const stickyHeaderFormatDate =\n    stickyHeaderDate?.getFullYear() === new Date().getFullYear() ? 'MMM D' : 'MMM D, YYYY';\n  const tStickyHeaderDate =\n    stickyHeaderDate && !hideStickyDateHeader ? tDateTimeParser(stickyHeaderDate) : null;\n  const stickyHeaderDateToRender =\n    tStickyHeaderDate === null || hideStickyDateHeader\n      ? null\n      : isDayOrMoment(tStickyHeaderDate)\n      ? tStickyHeaderDate.format(stickyHeaderFormatDate)\n      : new Date(tStickyHeaderDate).toDateString();\n\n  const dismissImagePicker = () => {\n    if (!hasMoved && selectedPicker) {\n      setSelectedPicker(undefined);\n      closePicker();\n    }\n  };\n  const onScrollBeginDrag = () => !hasMoved && selectedPicker && setHasMoved(true);\n  const onScrollEndDrag = () => hasMoved && selectedPicker && setHasMoved(false);\n\n  const refCallback = (ref: FlatListType<MessageType<At, Ch, Co, Ev, Me, Re, Us>>) => {\n    flatListRef.current = ref;\n\n    if (setFlatListRef) {\n      setFlatListRef(ref);\n    }\n  };\n  const renderListEmptyComponent = () => (\n    <View style={[styles.flex, styles.invert]} testID='empty-state'>\n      <EmptyStateIndicator listType='message' />\n    </View>\n  );\n\n  if (!FlatList) return null;\n\n  if (loading) {\n    return (\n      <View style={styles.flex}>\n        <LoadingIndicator listType='message' />\n      </View>\n    );\n  }\n\n  return (\n    <View style={[styles.container, { backgroundColor: white_snow }, container]}>\n      <FlatList\n        contentContainerStyle={[styles.contentContainer, contentContainer]}\n        data={messageList}\n        /** Disables the MessageList UI. Which means, message actions, reactions won't work. */\n        extraData={disabled || !channel?.state.isUpToDate}\n        inverted={inverted}\n        keyboardShouldPersistTaps='handled'\n        keyExtractor={keyExtractor}\n        ListEmptyComponent={renderListEmptyComponent}\n        ListFooterComponent={FooterComponent}\n        ListHeaderComponent={HeaderComponent}\n        maintainVisibleContentPosition={{\n          autoscrollToTopThreshold: autoscrollToTop ? 10 : undefined,\n          minIndexForVisible: 1,\n        }}\n        onScroll={handleScroll}\n        onScrollBeginDrag={onScrollBeginDrag}\n        onScrollEndDrag={onScrollEndDrag}\n        onTouchEnd={dismissImagePicker}\n        onViewableItemsChanged={onViewableItemsChanged.current}\n        ref={refCallback}\n        renderItem={renderItem}\n        scrollEnabled={overlay === 'none'}\n        style={[styles.listContainer, listContainer]}\n        testID='message-flat-list'\n        viewabilityConfig={flatListViewabilityConfig}\n        {...additionalFlatListProps}\n      />\n      {!loading && (\n        <>\n          <View style={styles.stickyHeader}>\n            {stickyHeaderDateToRender &&\n              (StickyHeader ? (\n                <StickyHeader dateString={stickyHeaderDateToRender} />\n              ) : messageListLengthAfterUpdate ? (\n                <DateHeader dateString={stickyHeaderDateToRender} />\n              ) : null)}\n          </View>\n          {!disableTypingIndicator && TypingIndicator && typingEventsEnabled !== false && (\n            <TypingIndicatorContainer>\n              <TypingIndicator />\n            </TypingIndicatorContainer>\n          )}\n          <ScrollToBottomButton\n            onPress={goToNewMessages}\n            showNotification={scrollToBottomButtonVisible}\n            unreadCount={threadList ? 0 : channel?.countUnread()}\n          />\n        </>\n      )}\n      <NetworkDownIndicator />\n    </View>\n  );\n};\n\nexport type MessageListProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Partial<MessageListPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>>;\n\nexport const MessageList = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: MessageListProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { closePicker, selectedPicker, setSelectedPicker } = useAttachmentPickerContext();\n  const {\n    channel,\n    disabled,\n    EmptyStateIndicator,\n    enableMessageGroupingByUser,\n    error,\n    hideStickyDateHeader,\n    loadChannelAtMessage,\n    loading,\n    LoadingIndicator,\n    markRead,\n    NetworkDownIndicator,\n    reloadChannel,\n    scrollToFirstUnreadThreshold,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n    typingEventsEnabled,\n  } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { setImages } = useImageGalleryContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const {\n    DateHeader,\n    disableTypingIndicator,\n    FlatList,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    legacyImageViewerSwipeBehaviour,\n    Message,\n    MessageSystem,\n    myMessageTheme,\n    ScrollToBottomButton,\n    TypingIndicator,\n    TypingIndicatorContainer,\n  } = useMessagesContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { loadMore, loadMoreRecent } = usePaginatedMessageListContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { overlay } = useOverlayContext();\n  const { loadMoreThread, thread } = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { t, tDateTimeParser } = useTranslationContext();\n\n  return (\n    <MessageListWithContext\n      {...{\n        channel,\n        client,\n        closePicker,\n        DateHeader,\n        disabled,\n        disableTypingIndicator,\n        EmptyStateIndicator,\n        enableMessageGroupingByUser,\n        error,\n        FlatList,\n        hideStickyDateHeader,\n        initialScrollToFirstUnreadMessage,\n        InlineDateSeparator,\n        InlineUnreadIndicator,\n        legacyImageViewerSwipeBehaviour,\n        loadChannelAtMessage,\n        loading,\n        LoadingIndicator,\n        loadMore,\n        loadMoreRecent,\n        loadMoreThread,\n        markRead,\n        Message,\n        MessageSystem,\n        myMessageTheme,\n        NetworkDownIndicator,\n        overlay,\n        reloadChannel,\n        ScrollToBottomButton,\n        scrollToFirstUnreadThreshold,\n        selectedPicker,\n        setImages,\n        setSelectedPicker,\n        setTargetedMessage,\n        StickyHeader,\n        t,\n        targetedMessage,\n        tDateTimeParser,\n        thread,\n        typingEventsEnabled,\n        TypingIndicator,\n        TypingIndicatorContainer,\n      }}\n      {...props}\n      noGroupByUser={!enableMessageGroupingByUser || props.noGroupByUser}\n    />\n  );\n};\n"]}