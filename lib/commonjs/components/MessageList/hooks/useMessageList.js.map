{"version":3,"sources":["useMessageList.ts"],"names":["isMessageWithStylesReadByAndDateSeparator","message","readBy","undefined","useMessageList","params","inverted","noGroupByUser","threadList","client","hideDateSeparators","maxTimeBetweenGroupedMessages","read","messages","threadMessages","messageList","readList","dateSeparators","userId","userID","messageGroupStyles","readData","messagesWithStylesReadByAndDateSeparator","filter","msg","deleted_at","user","id","map","dateSeparator","groupStyles","reverse"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAIA;;AACA;;AAiDO,IAAMA,yCAAyC,GAAG,SAA5CA,yCAA4C,CASvDC,OATuD;AAAA,SAWtDA,OAAD,CAA8EC,MAA9E,KACAC,SAZuD;AAAA,CAAlD;;;;AAcA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAS5BC,MAT4B,EAUzB;AACH,MAAQC,QAAR,GAAgDD,MAAhD,CAAQC,QAAR;AAAA,MAAkBC,aAAlB,GAAgDF,MAAhD,CAAkBE,aAAlB;AAAA,MAAiCC,UAAjC,GAAgDH,MAAhD,CAAiCG,UAAjC;;AACA,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AACA,2BACE,wCADF;AAAA,MAAQC,kBAAR,sBAAQA,kBAAR;AAAA,MAA4BC,6BAA5B,sBAA4BA,6BAA5B;AAAA,MAA2DC,IAA3D,sBAA2DA,IAA3D;;AAEA,8BAAqB,kEAArB;AAAA,MAAQC,QAAR,yBAAQA,QAAR;;AACA,0BAA2B,sCAA3B;AAAA,MAAQC,cAAR,qBAAQA,cAAR;;AAEA,MAAMC,WAAW,GAAGP,UAAU,GAAGM,cAAH,GAAoBD,QAAlD;AACA,MAAMG,QAA6E,GAAGR,UAAU,GAC5FL,SAD4F,GAE5FS,IAFJ;AAIA,MAAMK,cAAc,GAAG,0CAA8C;AACnEP,IAAAA,kBAAkB,EAAlBA,kBADmE;AAEnEG,IAAAA,QAAQ,EAAEE,WAFyD;AAGnEG,IAAAA,MAAM,EAAET,MAAM,CAACU;AAHoD,GAA9C,CAAvB;AAMA,MAAMC,kBAAkB,GAAG,oCAA2C;AACpEH,IAAAA,cAAc,EAAdA,cADoE;AAEpEP,IAAAA,kBAAkB,EAAlBA,kBAFoE;AAGpEC,IAAAA,6BAA6B,EAA7BA,6BAHoE;AAIpEE,IAAAA,QAAQ,EAAEE,WAJ0D;AAKpER,IAAAA,aAAa,EAAbA,aALoE;AAMpEW,IAAAA,MAAM,EAAET,MAAM,CAACU;AANqD,GAA3C,CAA3B;AASA,MAAME,QAAQ,GAAG,kCAAcZ,MAAM,CAACU,MAArB,EAA6BJ,WAA7B,EAA0CC,QAA1C,CAAjB;AAEA,MAAMM,wCAAwC,GAAGP,WAAW,CACzDQ,MAD8C,CACvC,UAACC,GAAD;AAAA;;AAAA,WAAS,CAACA,GAAG,CAACC,UAAL,IAAmB,cAAAD,GAAG,CAACE,IAAJ,+BAAUC,EAAV,MAAiBlB,MAAM,CAACU,MAApD;AAAA,GADuC,EAE9CS,GAF8C,CAE1C,UAACJ,GAAD;AAAA,yCACAA,GADA;AAEHK,MAAAA,aAAa,EAAEZ,cAAc,CAACO,GAAG,CAACG,EAAL,CAAd,IAA0BxB,SAFtC;AAGH2B,MAAAA,WAAW,EAAEV,kBAAkB,CAACI,GAAG,CAACG,EAAL,CAAlB,IAA8B,CAAC,QAAD,CAHxC;AAIHzB,MAAAA,MAAM,EAAEsB,GAAG,CAACG,EAAJ,GAASN,QAAQ,CAACG,GAAG,CAACG,EAAL,CAAR,IAAoB,KAA7B,GAAqC;AAJ1C;AAAA,GAF0C,CAAjD;AASA,SACErB,QAAQ,GACJgB,wCAAwC,CAACS,OAAzC,EADI,GAEJT,wCAHN;AAKD,CAtDM","sourcesContent":["import { getDateSeparators } from '../utils/getDateSeparators';\nimport { getGroupStyles } from '../utils/getGroupStyles';\nimport { getReadStates } from '../utils/getReadStates';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../../contexts/channelContext/ChannelContext';\nimport { usePaginatedMessageListContext } from '../../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport { useThreadContext } from '../../../contexts/threadContext/ThreadContext';\n\nimport type { ChannelState, MessageResponse } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport type UseMessageListParams = {\n  inverted?: boolean;\n  noGroupByUser?: boolean;\n  threadList?: boolean;\n};\n\nexport type GroupType = 'bottom' | 'middle' | 'single' | 'top';\n\nexport type MessagesWithStylesReadByAndDateSeparator<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = MessageResponse<At, Ch, Co, Me, Re, Us> & {\n  groupStyles: GroupType[];\n  readBy: boolean | number;\n  dateSeparator?: Date;\n};\n\nexport type MessageType<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> =\n  | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['formatMessage']>\n  | MessagesWithStylesReadByAndDateSeparator<At, Ch, Co, Me, Re, Us>;\n\n// Type guards to check MessageType\nexport const isMessageWithStylesReadByAndDateSeparator = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  message: MessageType<At, Ch, Co, Ev, Me, Re, Us>,\n): message is MessagesWithStylesReadByAndDateSeparator<At, Ch, Co, Me, Re, Us> =>\n  (message as MessagesWithStylesReadByAndDateSeparator<At, Ch, Co, Me, Re, Us>).readBy !==\n  undefined;\n\nexport const useMessageList = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  params: UseMessageListParams,\n) => {\n  const { inverted, noGroupByUser, threadList } = params;\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { hideDateSeparators, maxTimeBetweenGroupedMessages, read } =\n    useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { messages } = usePaginatedMessageListContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { threadMessages } = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const messageList = threadList ? threadMessages : messages;\n  const readList: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['read'] | undefined = threadList\n    ? undefined\n    : read;\n\n  const dateSeparators = getDateSeparators<At, Ch, Co, Ev, Me, Re, Us>({\n    hideDateSeparators,\n    messages: messageList,\n    userId: client.userID,\n  });\n\n  const messageGroupStyles = getGroupStyles<At, Ch, Co, Ev, Me, Re, Us>({\n    dateSeparators,\n    hideDateSeparators,\n    maxTimeBetweenGroupedMessages,\n    messages: messageList,\n    noGroupByUser,\n    userId: client.userID,\n  });\n\n  const readData = getReadStates(client.userID, messageList, readList);\n\n  const messagesWithStylesReadByAndDateSeparator = messageList\n    .filter((msg) => !msg.deleted_at || msg.user?.id === client.userID)\n    .map((msg) => ({\n      ...msg,\n      dateSeparator: dateSeparators[msg.id] || undefined,\n      groupStyles: messageGroupStyles[msg.id] || ['single'],\n      readBy: msg.id ? readData[msg.id] || false : false,\n    }));\n\n  return (\n    inverted\n      ? messagesWithStylesReadByAndDateSeparator.reverse()\n      : messagesWithStylesReadByAndDateSeparator\n  ) as MessageType<At, Ch, Co, Ev, Me, Re, Us>[];\n};\n"]}