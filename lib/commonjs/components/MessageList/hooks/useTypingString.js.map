{"version":3,"sources":["useTypingString.ts"],"names":["useTypingString","client","thread","t","typing","filteredTypingUsers","length","user","firstUser","nonSelfUserLength"],"mappings":";;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAaO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAQxB;AACL,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AACA,0BAAmB,sCAAnB;AAAA,MAAQC,MAAR,qBAAQA,MAAR;;AACA,8BAAc,gDAAd;AAAA,MAAQC,CAAR,yBAAQA,CAAR;;AACA,0BAAmB,sCAAnB;AAAA,MAAQC,MAAR,qBAAQA,MAAR;;AAEA,MAAMC,mBAAmB,GAAG,0CAAkB;AAAEJ,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,MAAM,EAANA,MAAV;AAAkBE,IAAAA,MAAM,EAANA;AAAlB,GAAlB,CAA5B;;AAEA,MAAIC,mBAAmB,CAACC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,WAAOH,CAAC,CAAC,sBAAD,EAAyB;AAAEI,MAAAA,IAAI,EAAEF,mBAAmB,CAAC,CAAD;AAA3B,KAAzB,CAAR;AACD;;AAED,MAAIA,mBAAmB,CAACC,MAApB,GAA6B,CAAjC,EAAoC;AAKlC,WAAOH,CAAC,CAAC,6DAAD,EAAgE;AACtEK,MAAAA,SAAS,EAAEH,mBAAmB,CAAC,CAAD,CADwC;AAEtEI,MAAAA,iBAAiB,EAAEJ,mBAAmB,CAACC,MAApB,GAA6B;AAFsB,KAAhE,CAAR;AAID;;AAED,SAAO,EAAP;AACD,CAhCM","sourcesContent":["import { filterTypingUsers } from '../utils/filterTypingUsers';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport { useThreadContext } from '../../../contexts/threadContext/ThreadContext';\nimport { useTranslationContext } from '../../../contexts/translationContext/TranslationContext';\nimport { useTypingContext } from '../../../contexts/typingContext/TypingContext';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useTypingString = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { thread } = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { t } = useTranslationContext();\n  const { typing } = useTypingContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const filteredTypingUsers = filterTypingUsers({ client, thread, typing });\n\n  if (filteredTypingUsers.length === 1) {\n    return t('{{ user }} is typing', { user: filteredTypingUsers[0] });\n  }\n\n  if (filteredTypingUsers.length > 1) {\n    /**\n     * Joins the multiple names with number after first name\n     * example: \"Dan and Neil\"\n     */\n    return t('{{ firstUser }} and {{ nonSelfUserLength }} more are typing', {\n      firstUser: filteredTypingUsers[0],\n      nonSelfUserLength: filteredTypingUsers.length - 1,\n    });\n  }\n\n  return '';\n};\n"]}