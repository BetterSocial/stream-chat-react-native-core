{"version":3,"sources":["useCreateTypingContext.ts"],"names":["useCreateTypingContext","typing","typingValue","Object","keys","join","typingContext"],"mappings":";;;;;AAAA;;AAcO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,OAUgB;AAAA,MADpDC,MACoD,QADpDA,MACoD;AACpD,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,IAApB,EAApB;AAEA,MAAMC,aAA6D,GAAG,oBACpE;AAAA,WAAO;AACLL,MAAAA,MAAM,EAANA;AADK,KAAP;AAAA,GADoE,EAIpE,CAACC,WAAD,CAJoE,CAAtE;AAOA,SAAOI,aAAP;AACD,CArBM","sourcesContent":["import { useMemo } from 'react';\n\nimport type { TypingContextValue } from '../../../contexts/typingContext/TypingContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useCreateTypingContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  typing,\n}: TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const typingValue = Object.keys(typing).join();\n\n  const typingContext: TypingContextValue<At, Ch, Co, Ev, Me, Re, Us> = useMemo(\n    () => ({\n      typing,\n    }),\n    [typingValue],\n  );\n\n  return typingContext;\n};\n"]}