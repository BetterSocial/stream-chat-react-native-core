{"version":3,"sources":["TypingIndicatorContainer.tsx"],"names":["styles","StyleSheet","create","container","bottom","position","width","TypingIndicatorContainerWithContext","props","children","client","thread","typing","typingIndicatorContainer","theme","messageList","typingUsers","length","TypingIndicatorContainer","displayName"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;AAaA,IAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE,CADC;AAETC,IAAAA,QAAQ,EAAE,UAFD;AAGTC,IAAAA,KAAK,EAAE;AAHE;AADoB,CAAlB,CAAf;;AAoBA,IAAMC,mCAAmC,GAAG,SAAtCA,mCAAsC,CAS1CC,KAT0C,EAUvC;AACH,MAAQC,QAAR,GAA6CD,KAA7C,CAAQC,QAAR;AAAA,MAAkBC,MAAlB,GAA6CF,KAA7C,CAAkBE,MAAlB;AAAA,MAA0BC,MAA1B,GAA6CH,KAA7C,CAA0BG,MAA1B;AAAA,MAAkCC,MAAlC,GAA6CJ,KAA7C,CAAkCI,MAAlC;;AAEA,kBAII,6BAJJ;AAAA,MAEmBC,wBAFnB,aACEC,KADF,CAEIC,WAFJ,CAEmBF,wBAFnB;;AAKA,MAAMG,WAAW,GAAG,0CAAkB;AAAEN,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,MAAM,EAANA,MAAV;AAAkBC,IAAAA,MAAM,EAANA;AAAlB,GAAlB,CAApB;;AAEA,MAAI,CAACI,WAAW,CAACC,MAAjB,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,SACE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACjB,MAAM,CAACG,SAAR,EAAmBU,wBAAnB,CAAb;AAA2D,IAAA,MAAM,EAAC,4BAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,QADH,CADF;AAKD,CA7BD;;AAyCO,IAAMS,wBAAwB,GAAG,SAA3BA,wBAA2B,CAStCV,KATsC,EAUnC;AACH,0BAAmB,sCAAnB;AAAA,MAAQI,MAAR,qBAAQA,MAAR;;AACA,wBAAmB,kCAAnB;AAAA,MAAQF,MAAR,mBAAQA,MAAR;;AACA,0BAAmB,sCAAnB;AAAA,MAAQC,MAAR,qBAAQA,MAAR;;AAEA,SAAO,gCAAC,mCAAD;AAA2CD,IAAAA,MAAM,EAANA,MAA3C;AAAmDC,IAAAA,MAAM,EAANA,MAAnD;AAA2DC,IAAAA,MAAM,EAANA;AAA3D,KAAyEJ,KAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAhBM;;;AAkBPU,wBAAwB,CAACC,WAAzB,GACE,iEADF","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { filterTypingUsers } from './utils/filterTypingUsers';\n\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport { TypingContextValue, useTypingContext } from '../../contexts/typingContext/TypingContext';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst styles = StyleSheet.create({\n  container: {\n    bottom: 0,\n    position: 'absolute',\n    width: '100%',\n  },\n});\n\ntype TypingIndicatorContainerPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n> = Pick<TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'typing'> &\n  Pick<ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'client'> &\n  Pick<ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'thread'>;\n\nconst TypingIndicatorContainerWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  props: PropsWithChildren<TypingIndicatorContainerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>>,\n) => {\n  const { children, client, thread, typing } = props;\n\n  const {\n    theme: {\n      messageList: { typingIndicatorContainer },\n    },\n  } = useTheme();\n  const typingUsers = filterTypingUsers({ client, thread, typing });\n\n  if (!typingUsers.length) {\n    return null;\n  }\n\n  return (\n    <View style={[styles.container, typingIndicatorContainer]} testID='typing-indicator-container'>\n      {children}\n    </View>\n  );\n};\n\nexport type TypingIndicatorContainerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n> = Partial<TypingIndicatorContainerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>>;\n\nexport const TypingIndicatorContainer = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  props: PropsWithChildren<TypingIndicatorContainerProps<At, Ch, Co, Ev, Me, Re, Us>>,\n) => {\n  const { typing } = useTypingContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { thread } = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  return <TypingIndicatorContainerWithContext {...{ client, thread, typing }} {...props} />;\n};\n\nTypingIndicatorContainer.displayName =\n  'TypingIndicatorContainer{messageList{typingIndicatorContainer}}';\n"]}