{"version":3,"sources":["SuggestionsList.tsx"],"names":["styles","StyleSheet","create","emojiItem","paddingVertical","SuggestionsItem","props","children","touchableOpacityProps","displayName","isString","component","SuggestionsList","active","Component","componentType","suggestions","data","onSelect","SuggestionsTitle","suggestionsTitle","theme","messageInput","maxHeight","container","itemStyle","item","renderItem","index","paddingBottom","length","paddingTop","React","cloneElement","name","id","undefined"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AAQA;;;;;;;AAIA,IAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,eAAe,EAAE;AAAnB;AADoB,CAAlB,CAAf;;AAIA,IAAMC,eAAgD,GAAG,SAAnDA,eAAmD,CAACC,KAAD,EAAW;AAClE,MAAQC,QAAR,GAA+CD,KAA/C,CAAQC,QAAR;AAAA,MAAqBC,qBAArB,6CAA+CF,KAA/C;AACA,SAAO,gCAAC,6BAAD,gCAAsBE,qBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA8CD,QAA9C,CAAP;AACD,CAHD;;AAKAF,eAAe,CAACI,WAAhB,GAA8B,8CAA9B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CACfC,SADe;AAAA,SAES,OAAOA,SAAP,KAAqB,QAF9B;AAAA,CAAjB;;AAcO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAI7BN,KAJ6B,EAK1B;AACH,MACEO,MADF,GAKIP,KALJ,CACEO,MADF;AAAA,MAEiBC,SAFjB,GAKIR,KALJ,CAEES,aAFF;AAAA,2BAKIT,KALJ,CAGEU,WAHF;AAAA,MAGiBC,IAHjB,sBAGiBA,IAHjB;AAAA,MAGuBC,QAHvB,sBAGuBA,QAHvB;AAAA,MAIoBC,gBAJpB,GAKIb,KALJ,CAIEc,gBAJF;;AAOA,kBASI,6BATJ;AAAA,wCACEC,KADF,CAEIC,YAFJ,CAGMN,WAHN;AAAA,MAIqBO,SAJrB,yBAIQC,SAJR,CAIqBD,SAJrB;AAAA,MAKcE,SALd,yBAKQC,IALR;;AAWA,MAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkE;AAAA,QAA/DC,KAA+D,QAA/DA,KAA+D;AAAA,QAAxDF,IAAwD,QAAxDA,IAAwD;;AACnF,QAAIhB,QAAQ,CAACI,SAAD,CAAZ,EAAyB;AACvB,cAAQA,SAAR;AACE,aAAK,cAAL;AACE,cAAI,0CAAiBY,IAAjB,CAAJ,EAA4B;AAC1B,mBACE,gCAAC,eAAD;AACE,cAAA,OAAO,EAAE;AAAA,uBAAMR,QAAQ,CAACQ,IAAD,CAAd;AAAA,eADX;AAEE,cAAA,KAAK,EAAE,CACL;AACEG,gBAAAA,aAAa,EAAED,KAAK,KAAKX,IAAI,CAACa,MAAL,GAAc,CAAxB,GAA4B,CAA5B,GAAgC,CADjD;AAEEC,gBAAAA,UAAU,EAAEH,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB;AAFhC,eADK,EAKLH,SALK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAUE,gCAAC,0BAAD;AAAc,cAAA,IAAI,EAAEC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,CADF;AAcD;;AACD,iBAAO,IAAP;;AACF,aAAK,cAAL;AACE,cAAI,6CAAoBA,IAApB,CAAJ,EAA+B;AAC7B,mBACE,gCAAC,eAAD;AAAiB,cAAA,OAAO,EAAE;AAAA,uBAAMR,QAAQ,CAACQ,IAAD,CAAd;AAAA,eAA1B;AAAgD,cAAA,KAAK,EAAE,CAACD,SAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,gCAAC,0BAAD;AAAc,cAAA,IAAI,EAAEC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF;AAKD;;AACD,iBAAO,IAAP;;AACF,aAAK,YAAL;AACE,cAAI,2CAAkBA,IAAlB,CAAJ,EAA6B;AAC3B,mBACE,gCAAC,eAAD;AAAiB,cAAA,OAAO,EAAE;AAAA,uBAAMR,QAAQ,CAACQ,IAAD,CAAd;AAAA,eAA1B;AAAgD,cAAA,KAAK,EAAE,CAAC1B,MAAM,CAACG,SAAR,EAAmBsB,SAAnB,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,gCAAC,sBAAD;AAAY,cAAA,IAAI,EAAEC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF;AAKD;;AACD,iBAAO,IAAP;;AACF;AACE,iBAAO,IAAP;AAtCJ;AAwCD;;AAED,WACE,gCAAC,eAAD;AAAiB,MAAA,OAAO,EAAE;AAAA,eAAMR,QAAQ,CAACQ,IAAD,CAAd;AAAA,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,kBAAMC,YAAN,CAAmBnB,SAAnB,EAA8B;AAAEY,MAAAA,IAAI,EAAJA;AAAF,KAA9B,CADH,CADF;AAKD,GAjDD;;AAmDA,MAAI,CAACb,MAAD,IAAWI,IAAI,CAACa,MAAL,KAAgB,CAA/B,EAAkC,OAAO,IAAP;AAElC,SACE,gCAAC,qBAAD;AACE,IAAA,IAAI,EAAEb,IADR;AAEE,IAAA,yBAAyB,EAAC,QAF5B;AAGE,IAAA,YAAY,EAAE,sBAACS,IAAD,EAAOE,KAAP;AAAA,mBACTF,IAAI,CAACQ,IAAL,KAAc,0CAAiBR,IAAjB,IAAyBA,IAAI,CAACS,EAA9B,GAAmC,EAAjD,CADS,IAC8CP,KAD9C;AAAA,KAHhB;AAME,IAAA,mBAAmB,EAAET,gBAAgB,GAAGA,gBAAH,GAAsBiB,SAN7D;AAOE,IAAA,UAAU,EAAET,UAPd;AAQE,IAAA,KAAK,EAAE;AACLJ,MAAAA,SAAS,EAATA;AADK,KART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcD,CA3FM;;;AA6FPX,eAAe,CAACH,WAAhB,GAA8B,4CAA9B","sourcesContent":["import React from 'react';\nimport { FlatList, StyleSheet, TouchableOpacity, TouchableOpacityProps } from 'react-native';\n\nimport { CommandsItem } from './CommandsItem';\nimport { EmojisItem } from './EmojisItem';\nimport { MentionsItem } from './MentionsItem';\n\nimport {\n  isSuggestionCommand,\n  isSuggestionEmoji,\n  isSuggestionUser,\n  Suggestion,\n  SuggestionComponentType,\n  Suggestions,\n} from '../../contexts/suggestionsContext/SuggestionsContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\n\nimport type { DefaultCommandType, DefaultUserType, UnknownType } from '../../types/types';\n\nconst styles = StyleSheet.create({\n  emojiItem: { paddingVertical: 10 },\n});\n\nconst SuggestionsItem: React.FC<TouchableOpacityProps> = (props) => {\n  const { children, ...touchableOpacityProps } = props;\n  return <TouchableOpacity {...touchableOpacityProps}>{children}</TouchableOpacity>;\n};\n\nSuggestionsItem.displayName = 'SuggestionsHeader{messageInput{suggestions}}';\n\nconst isString = <Co extends string = DefaultCommandType, Us extends UnknownType = DefaultUserType>(\n  component: SuggestionComponentType<Co, Us>,\n): component is string => typeof component === 'string';\n\nexport type SuggestionsListProps<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  active: boolean;\n  componentType: SuggestionComponentType<Co, Us>;\n  suggestions: Suggestions<Co, Us>;\n  suggestionsTitle?: React.ReactElement;\n};\n\nexport const SuggestionsList = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: SuggestionsListProps<Co, Us>,\n) => {\n  const {\n    active,\n    componentType: Component,\n    suggestions: { data, onSelect },\n    suggestionsTitle: SuggestionsTitle,\n  } = props;\n\n  const {\n    theme: {\n      messageInput: {\n        suggestions: {\n          container: { maxHeight },\n          item: itemStyle,\n        },\n      },\n    },\n  } = useTheme();\n\n  const renderItem = ({ index, item }: { index: number; item: Suggestion<Co, Us> }) => {\n    if (isString(Component)) {\n      switch (Component) {\n        case 'MentionsItem':\n          if (isSuggestionUser(item)) {\n            return (\n              <SuggestionsItem\n                onPress={() => onSelect(item)}\n                style={[\n                  {\n                    paddingBottom: index === data.length - 1 ? 8 : 0,\n                    paddingTop: index === 0 ? 8 : 0,\n                  },\n                  itemStyle,\n                ]}\n              >\n                <MentionsItem item={item} />\n              </SuggestionsItem>\n            );\n          }\n          return null;\n        case 'CommandsItem':\n          if (isSuggestionCommand(item)) {\n            return (\n              <SuggestionsItem onPress={() => onSelect(item)} style={[itemStyle]}>\n                <CommandsItem item={item} />\n              </SuggestionsItem>\n            );\n          }\n          return null;\n        case 'EmojisItem':\n          if (isSuggestionEmoji(item)) {\n            return (\n              <SuggestionsItem onPress={() => onSelect(item)} style={[styles.emojiItem, itemStyle]}>\n                <EmojisItem item={item} />\n              </SuggestionsItem>\n            );\n          }\n          return null;\n        default:\n          return null;\n      }\n    }\n\n    return (\n      <SuggestionsItem onPress={() => onSelect(item)}>\n        {React.cloneElement(Component, { item })}\n      </SuggestionsItem>\n    );\n  };\n\n  if (!active || data.length === 0) return null;\n\n  return (\n    <FlatList\n      data={data}\n      keyboardShouldPersistTaps='always'\n      keyExtractor={(item, index) =>\n        `${item.name || (isSuggestionUser(item) ? item.id : '')}${index}`\n      }\n      ListHeaderComponent={SuggestionsTitle ? SuggestionsTitle : undefined}\n      renderItem={renderItem}\n      style={{\n        maxHeight,\n      }}\n    />\n  );\n};\n\nSuggestionsList.displayName = 'SuggestionsList{messageInput{suggestions}}';\n"]}