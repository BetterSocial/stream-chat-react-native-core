{"version":3,"sources":["useCreateThreadContext.ts"],"names":["useCreateThreadContext","allowThreadMessagesInChannel","closeThread","loadMoreThread","openThread","reloadThread","setThreadLoadingMore","thread","threadHasMore","threadLoadingMore","threadMessages","threadId","id","threadReplyCount","reply_count","threadMessagesUpdated","map","deleted_at","latest_reactions","status","updated_at","type","join","toISOString","threadContext"],"mappings":";;;;;AAAA;;AAcO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,OAmBgB;AAAA,MAVpDC,4BAUoD,QAVpDA,4BAUoD;AAAA,MATpDC,WASoD,QATpDA,WASoD;AAAA,MARpDC,cAQoD,QARpDA,cAQoD;AAAA,MAPpDC,UAOoD,QAPpDA,UAOoD;AAAA,MANpDC,YAMoD,QANpDA,YAMoD;AAAA,MALpDC,oBAKoD,QALpDA,oBAKoD;AAAA,MAJpDC,MAIoD,QAJpDA,MAIoD;AAAA,MAHpDC,aAGoD,QAHpDA,aAGoD;AAAA,MAFpDC,iBAEoD,QAFpDA,iBAEoD;AAAA,MADpDC,cACoD,QADpDA,cACoD;AACpD,MAAMC,QAAQ,GAAGJ,MAAH,oBAAGA,MAAM,CAAEK,EAAzB;AACA,MAAMC,gBAAgB,GAAGN,MAAH,oBAAGA,MAAM,CAAEO,WAAjC;AACA,MAAMC,qBAAqB,GAAGL,cAAc,CACzCM,GAD2B,CAE1B;AAAA,QAAGC,UAAH,SAAGA,UAAH;AAAA,QAAeC,gBAAf,SAAeA,gBAAf;AAAA,QAAiCJ,WAAjC,SAAiCA,WAAjC;AAAA,QAA8CK,MAA9C,SAA8CA,MAA9C;AAAA,QAAsDC,UAAtD,SAAsDA,UAAtD;AAAA,gBACKH,UADL,IAEIC,gBAAgB,GAAGA,gBAAgB,CAACF,GAAjB,CAAqB;AAAA,UAAGK,IAAH,SAAGA,IAAH;AAAA,aAAcA,IAAd;AAAA,KAArB,EAAyCC,IAAzC,EAAH,GAAqD,EAFzE,IAGKR,WAHL,GAGmBK,MAHnB,GAG4BC,UAAU,CAACG,WAAX,EAH5B;AAAA,GAF0B,EAO3BD,IAP2B,EAA9B;AASA,MAAME,aAA6D,GAAG,oBACpE;AAAA,WAAO;AACLvB,MAAAA,4BAA4B,EAA5BA,4BADK;AAELC,MAAAA,WAAW,EAAXA,WAFK;AAGLC,MAAAA,cAAc,EAAdA,cAHK;AAILC,MAAAA,UAAU,EAAVA,UAJK;AAKLC,MAAAA,YAAY,EAAZA,YALK;AAMLC,MAAAA,oBAAoB,EAApBA,oBANK;AAOLC,MAAAA,MAAM,EAANA,MAPK;AAQLC,MAAAA,aAAa,EAAbA,aARK;AASLC,MAAAA,iBAAiB,EAAjBA,iBATK;AAULC,MAAAA,cAAc,EAAdA;AAVK,KAAP;AAAA,GADoE,EAapE,CACET,4BADF,EAEEO,aAFF,EAGEG,QAHF,EAIEF,iBAJF,EAKEM,qBALF,EAMEF,gBANF,CAboE,CAAtE;AAuBA,SAAOW,aAAP;AACD,CAvDM","sourcesContent":["import { useMemo } from 'react';\n\nimport type { ThreadContextValue } from '../../../contexts/threadContext/ThreadContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useCreateThreadContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  allowThreadMessagesInChannel,\n  closeThread,\n  loadMoreThread,\n  openThread,\n  reloadThread,\n  setThreadLoadingMore,\n  thread,\n  threadHasMore,\n  threadLoadingMore,\n  threadMessages,\n}: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const threadId = thread?.id;\n  const threadReplyCount = thread?.reply_count;\n  const threadMessagesUpdated = threadMessages\n    .map(\n      ({ deleted_at, latest_reactions, reply_count, status, updated_at }) =>\n        `${deleted_at}${\n          latest_reactions ? latest_reactions.map(({ type }) => type).join() : ''\n        }${reply_count}${status}${updated_at.toISOString()}`,\n    )\n    .join();\n\n  const threadContext: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us> = useMemo(\n    () => ({\n      allowThreadMessagesInChannel,\n      closeThread,\n      loadMoreThread,\n      openThread,\n      reloadThread,\n      setThreadLoadingMore,\n      thread,\n      threadHasMore,\n      threadLoadingMore,\n      threadMessages,\n    }),\n    [\n      allowThreadMessagesInChannel,\n      threadHasMore,\n      threadId,\n      threadLoadingMore,\n      threadMessagesUpdated,\n      threadReplyCount,\n    ],\n  );\n\n  return threadContext;\n};\n"]}