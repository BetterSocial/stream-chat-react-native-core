{"version":3,"sources":["useCreateChannelContext.ts"],"names":["useCreateChannelContext","channel","disabled","EmptyStateIndicator","enableMessageGroupingByUser","enforceUniqueReaction","error","giphyEnabled","hideDateSeparators","hideStickyDateHeader","isAdmin","isModerator","isOwner","lastRead","loadChannelAtMessage","loading","LoadingIndicator","markRead","maxTimeBetweenGroupedMessages","members","NetworkDownIndicator","read","readEventsEnabled","reloadChannel","scrollToFirstUnreadThreshold","setLastRead","setTargetedMessage","StickyHeader","targetedMessage","typingEventsEnabled","watcherCount","watchers","channelId","id","lastReadTime","getTime","membersLength","Object","keys","length","readUsers","values","readUsersLength","readUsersLastReads","map","last_read","toISOString","join","channelContext"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\n\nimport type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useCreateChannelContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  channel,\n  disabled,\n  EmptyStateIndicator,\n  enableMessageGroupingByUser,\n  enforceUniqueReaction,\n  error,\n  giphyEnabled,\n  hideDateSeparators,\n  hideStickyDateHeader,\n  isAdmin,\n  isModerator,\n  isOwner,\n  lastRead,\n  loadChannelAtMessage,\n  loading,\n  LoadingIndicator,\n  markRead,\n  maxTimeBetweenGroupedMessages,\n  members,\n  NetworkDownIndicator,\n  read,\n  readEventsEnabled,\n  reloadChannel,\n  scrollToFirstUnreadThreshold,\n  setLastRead,\n  setTargetedMessage,\n  StickyHeader,\n  targetedMessage,\n  typingEventsEnabled,\n  watcherCount,\n  watchers,\n}: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const channelId = channel?.id;\n  const lastReadTime = lastRead?.getTime();\n  const membersLength = Object.keys(members).length;\n\n  const readUsers = Object.values(read);\n  const readUsersLength = readUsers.length;\n  const readUsersLastReads = readUsers.map(({ last_read }) => last_read.toISOString()).join();\n\n  const channelContext: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us> = useMemo(\n    () => ({\n      channel,\n      disabled,\n      EmptyStateIndicator,\n      enableMessageGroupingByUser,\n      enforceUniqueReaction,\n      error,\n      giphyEnabled,\n      hideDateSeparators,\n      hideStickyDateHeader,\n      isAdmin,\n      isModerator,\n      isOwner,\n      lastRead,\n      loadChannelAtMessage,\n      loading,\n      LoadingIndicator,\n      markRead,\n      maxTimeBetweenGroupedMessages,\n      members,\n      NetworkDownIndicator,\n      read,\n      readEventsEnabled,\n      reloadChannel,\n      scrollToFirstUnreadThreshold,\n      setLastRead,\n      setTargetedMessage,\n      StickyHeader,\n      targetedMessage,\n      typingEventsEnabled,\n      watcherCount,\n      watchers,\n    }),\n    [\n      channelId,\n      disabled,\n      error,\n      lastReadTime,\n      loading,\n      membersLength,\n      readEventsEnabled,\n      readUsersLength,\n      readUsersLastReads,\n      targetedMessage,\n      typingEventsEnabled,\n      watcherCount,\n    ],\n  );\n\n  return channelContext;\n};\n"]}