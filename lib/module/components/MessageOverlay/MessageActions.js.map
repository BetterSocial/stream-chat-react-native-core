{"version":3,"sources":["MessageActions.tsx"],"names":["styles","StyleSheet","create","bottomBorder","borderBottomWidth","container","borderRadius","marginTop","maxWidth","row","alignItems","flexDirection","justifyContent","minWidth","paddingHorizontal","paddingVertical","titleStyle","paddingLeft","MessageAction","props","action","icon","index","length","title","theme","colors","black","border","opacity","onTap","onEnd","onFinish","value","onStart","animatedStyle","borderBottomColor","color","messageActionIsEqual","prevProps","nextProps","MemoizedMessageAction","React","memo","MessageActionsWithContext","alignment","messageActions","showScreen","white_snow","height","width","showScreenStyle","transform","translateY","translateX","scale","layout","nativeEvent","backgroundColor","map","messageAction","areEqual","prevAlignment","prevMessageActions","nextAlignment","nextMessageActions","messageActionsEqual","alignmentEqual","MemoizedMessageActions","MessageActions","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, ViewStyle } from 'react-native';\nimport { TapGestureHandler, TapGestureHandlerStateChangeEvent } from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nimport {\n  MessageAction as MessageActionType,\n  MessageOverlayData,\n  useMessageOverlayContext,\n} from '../../contexts/messageOverlayContext/MessageOverlayContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { vw } from '../../utils/utils';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst styles = StyleSheet.create({\n  bottomBorder: {\n    borderBottomWidth: 1,\n  },\n  container: {\n    borderRadius: 16,\n    marginTop: 8,\n    maxWidth: 275,\n  },\n  row: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    minWidth: vw(65),\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  titleStyle: {\n    paddingLeft: 20,\n  },\n});\n\ntype MessageActionProps = MessageActionType & {\n  index: number;\n  length: number;\n};\n\nconst MessageAction: React.FC<MessageActionProps> = (props) => {\n  const { action, icon, index, length, title, titleStyle } = props;\n\n  const {\n    theme: {\n      colors: { black, border },\n    },\n  } = useTheme();\n\n  const opacity = useSharedValue(1);\n\n  const onTap = useAnimatedGestureHandler<TapGestureHandlerStateChangeEvent>(\n    {\n      onEnd: () => {\n        runOnJS(action)();\n      },\n      onFinish: () => {\n        opacity.value = 1;\n      },\n      onStart: () => {\n        opacity.value = 0.2;\n      },\n    },\n    [action],\n  );\n\n  const animatedStyle = useAnimatedStyle<ViewStyle>(() => ({\n    opacity: opacity.value,\n  }));\n\n  return (\n    <TapGestureHandler onHandlerStateChange={onTap}>\n      <Animated.View\n        style={[\n          styles.row,\n          index !== length - 1 ? { ...styles.bottomBorder, borderBottomColor: border } : {},\n          animatedStyle,\n        ]}\n      >\n        {icon}\n        <Text style={[styles.titleStyle, { color: black }, titleStyle]}>{title}</Text>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n};\n\nconst messageActionIsEqual = (prevProps: MessageActionProps, nextProps: MessageActionProps) =>\n  prevProps.length === nextProps.length;\n\nconst MemoizedMessageAction = React.memo(\n  MessageAction,\n  messageActionIsEqual,\n) as typeof MessageAction;\n\nexport type MessageActionsPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Pick<MessageOverlayData<At, Ch, Co, Ev, Me, Re, Us>, 'alignment' | 'messageActions'> & {\n  showScreen: Animated.SharedValue<number>;\n};\nconst MessageActionsWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: MessageActionsPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { alignment, messageActions, showScreen } = props;\n\n  const {\n    theme: {\n      colors: { white_snow },\n    },\n  } = useTheme();\n\n  const height = useSharedValue(0);\n  const width = useSharedValue(0);\n\n  const showScreenStyle = useAnimatedStyle<ViewStyle>(\n    () => ({\n      transform: [\n        {\n          translateY: interpolate(showScreen.value, [0, 1], [-height.value / 2, 0]),\n        },\n        {\n          translateX: interpolate(\n            showScreen.value,\n            [0, 1],\n            [alignment === 'left' ? -width.value / 2 : width.value / 2, 0],\n          ),\n        },\n        {\n          scale: showScreen.value,\n        },\n      ],\n    }),\n    [alignment],\n  );\n\n  return (\n    <Animated.View\n      onLayout={({ nativeEvent: { layout } }) => {\n        width.value = layout.width;\n        height.value = layout.height;\n      }}\n      style={[styles.container, { backgroundColor: white_snow }, showScreenStyle]}\n    >\n      {messageActions?.map((messageAction, index) => (\n        <MemoizedMessageAction\n          key={messageAction.title}\n          {...{ ...messageAction, index, length: messageActions.length }}\n        />\n      ))}\n    </Animated.View>\n  );\n};\n\nconst areEqual = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  prevProps: MessageActionsPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n  nextProps: MessageActionsPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { alignment: prevAlignment, messageActions: prevMessageActions } = prevProps;\n  const { alignment: nextAlignment, messageActions: nextMessageActions } = nextProps;\n\n  const messageActionsEqual = prevMessageActions?.length === nextMessageActions?.length;\n  if (!messageActionsEqual) return false;\n\n  const alignmentEqual = prevAlignment === nextAlignment;\n  if (!alignmentEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageActions = React.memo(\n  MessageActionsWithContext,\n  areEqual,\n) as typeof MessageActionsWithContext;\n\nexport type MessageActionsProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Partial<Omit<MessageActionsPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>, 'showScreen'>> &\n  Pick<MessageActionsPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>, 'showScreen'>;\n\n/**\n * MessageActions - A high level component which implements all the logic required for MessageActions\n */\nexport const MessageActions = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: MessageActionsProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { data } = useMessageOverlayContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const { alignment, messageActions } = data || {};\n\n  return <MemoizedMessageActions {...{ alignment, messageActions }} {...props} />;\n};\n"]}