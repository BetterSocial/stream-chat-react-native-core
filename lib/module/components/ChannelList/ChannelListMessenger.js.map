{"version":3,"sources":["ChannelListMessenger.tsx"],"names":["styles","StyleSheet","create","flatList","flex","flatListContentContainer","flexGrow","statusIndicator","left","position","right","top","StatusIndicator","isOnline","error","HeaderErrorIndicator","HeaderNetworkDownIndicator","loadingChannels","refreshList","renderItem","item","keyExtractor","cid","ChannelListMessengerWithContext","props","additionalFlatListProps","channels","EmptyStateIndicator","FooterLoadingIndicator","forceUpdate","ListHeaderComponent","LoadingErrorIndicator","LoadingIndicator","loadingNextPage","loadMoreThreshold","loadNextPage","refreshing","reloadList","setFlatListRef","theme","channelListMessenger","flatListContent","white_snow","colors","loading","setLoading","length","onEndReached","ListFooterComponent","backgroundColor","undefined","ChannelListMessenger","displayName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// RNGR's FlatList ist currently breaking the pull-to-refresh behaviour on Android\n// See https://github.com/software-mansion/react-native-gesture-handler/issues/598\nimport { FlatList, RefreshControl, StyleSheet, View } from 'react-native';\n\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\n\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  ChannelsContextValue,\n  useChannelsContext,\n} from '../../contexts/channelsContext/ChannelsContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\n\nimport type { Channel } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst styles = StyleSheet.create({\n  flatList: { flex: 1 },\n  flatListContentContainer: { flexGrow: 1 },\n  statusIndicator: { left: 0, position: 'absolute', right: 0, top: 0 },\n});\n\nexport type ChannelListMessengerPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Omit<\n  ChannelsContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n  | 'hasNextPage'\n  | 'HeaderErrorIndicator'\n  | 'HeaderNetworkDownIndicator'\n  | 'maxUnreadCount'\n  | 'numberOfSkeletons'\n  | 'onSelect'\n  | 'Preview'\n  | 'PreviewTitle'\n  | 'PreviewStatus'\n  | 'PreviewAvatar'\n  | 'previewMessage'\n  | 'Skeleton'\n>;\n\nconst StatusIndicator = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() => {\n  const { isOnline } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { error, HeaderErrorIndicator, HeaderNetworkDownIndicator, loadingChannels, refreshList } =\n    useChannelsContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  if (loadingChannels) return null;\n\n  if (!isOnline) {\n    return (\n      <View style={styles.statusIndicator}>\n        <HeaderNetworkDownIndicator />\n      </View>\n    );\n  } else if (error) {\n    return (\n      <View style={styles.statusIndicator}>\n        <HeaderErrorIndicator onPress={refreshList} />\n      </View>\n    );\n  }\n  return null;\n};\n\nconst renderItem = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  item,\n}: {\n  item: Channel<At, Ch, Co, Ev, Me, Re, Us>;\n}) => <ChannelPreview<At, Ch, Co, Ev, Me, Re, Us> channel={item} />;\n\nconst keyExtractor = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  item: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n) => item.cid;\n\nconst ChannelListMessengerWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: ChannelListMessengerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    additionalFlatListProps,\n    channels,\n    EmptyStateIndicator,\n    error,\n    FooterLoadingIndicator,\n    forceUpdate,\n    ListHeaderComponent,\n    loadingChannels,\n    LoadingErrorIndicator,\n    LoadingIndicator,\n    loadingNextPage,\n    loadMoreThreshold,\n    loadNextPage,\n    refreshing,\n    refreshList,\n    reloadList,\n    setFlatListRef,\n  } = props;\n\n  const {\n    theme: {\n      channelListMessenger: { flatList, flatListContent },\n      colors: { white_snow },\n    },\n  } = useTheme();\n\n  /**\n   * In order to prevent the EmptyStateIndicator component from showing up briefly on mount,\n   * we set the loading state one cycle behind to ensure the channels are set before the\n   * change to loadingChannels is registered.\n   */\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (!!loadingChannels !== loading) {\n      setLoading(!!loadingChannels);\n    }\n  }, [loading, loadingChannels]);\n\n  if (error && !refreshing && !loadingChannels && !channels?.length) {\n    return (\n      <LoadingErrorIndicator\n        error={error}\n        listType='channel'\n        loadNextPage={loadNextPage}\n        retry={reloadList}\n      />\n    );\n  }\n\n  const onEndReached = () => {\n    if (loadNextPage) {\n      loadNextPage();\n    }\n  };\n\n  const ListFooterComponent = () =>\n    channels.length && ListHeaderComponent ? <ListHeaderComponent /> : null;\n\n  return (\n    <>\n      <FlatList\n        contentContainerStyle={[\n          styles.flatListContentContainer,\n          { backgroundColor: white_snow },\n          flatListContent,\n        ]}\n        data={channels}\n        extraData={forceUpdate}\n        keyExtractor={keyExtractor}\n        ListEmptyComponent={\n          loading ? (\n            <LoadingIndicator listType='channel' />\n          ) : (\n            <EmptyStateIndicator listType='channel' />\n          )\n        }\n        ListFooterComponent={loadingNextPage ? <FooterLoadingIndicator /> : undefined}\n        ListHeaderComponent={ListFooterComponent}\n        onEndReached={onEndReached}\n        onEndReachedThreshold={loadMoreThreshold}\n        // @ts-expect-error waiting for this merged PR to be released https://github.com/software-mansion/react-native-gesture-handler/pull/1394\n        ref={setFlatListRef}\n        refreshControl={<RefreshControl onRefresh={refreshList} refreshing={refreshing} />}\n        renderItem={renderItem}\n        style={[styles.flatList, { backgroundColor: white_snow }, flatList]}\n        testID='channel-list-messenger'\n        {...additionalFlatListProps}\n      />\n      <StatusIndicator<At, Ch, Co, Ev, Me, Re, Us> />\n    </>\n  );\n};\n\nexport type ChannelListMessengerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Partial<ChannelListMessengerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>>;\n\n/**\n * This UI component displays the preview list of channels and handles Channel navigation. It\n * receives all props from the ChannelList component.\n *\n * @example ./ChannelListMessenger.md\n */\nexport const ChannelListMessenger = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: ChannelListMessengerProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    additionalFlatListProps,\n    channels,\n    EmptyStateIndicator,\n    error,\n    FooterLoadingIndicator,\n    forceUpdate,\n    ListHeaderComponent,\n    loadingChannels,\n    LoadingErrorIndicator,\n    LoadingIndicator,\n    loadingNextPage,\n    loadMoreThreshold,\n    loadNextPage,\n    refreshing,\n    refreshList,\n    reloadList,\n    setFlatListRef,\n  } = useChannelsContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  return (\n    <ChannelListMessengerWithContext\n      {...{\n        additionalFlatListProps,\n        channels,\n        EmptyStateIndicator,\n        error,\n        FooterLoadingIndicator,\n        forceUpdate,\n        ListHeaderComponent,\n        loadingChannels,\n        LoadingErrorIndicator,\n        LoadingIndicator,\n        loadingNextPage,\n        loadMoreThreshold,\n        loadNextPage,\n        refreshing,\n        refreshList,\n        reloadList,\n        setFlatListRef,\n      }}\n      {...props}\n    />\n  );\n};\n\nChannelListMessenger.displayName = 'ChannelListMessenger{channelListMessenger}';\n"]}