{"version":3,"sources":["useNewMessageNotification.ts"],"names":["useNewMessageNotification","onMessageNew","setChannels","client","handleEvent","event","channel","id","type","channels","on","off"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AA+BO,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,OAWK;AAAA,MAF5CC,YAE4C,QAF5CA,YAE4C;AAAA,MAD5CC,WAC4C,QAD5CA,WAC4C;;AAC5C,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW;AAAA,kFAAG,iBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACd,OAAOJ,YAAP,KAAwB,UADV;AAAA;AAAA;AAAA;;AAEhBA,gBAAAA,YAAY,CAACC,WAAD,EAAcG,KAAd,CAAZ;AAFgB;AAAA;;AAAA;AAAA,sBAIZ,kBAAAA,KAAK,CAACC,OAAN,4BAAeC,EAAf,uBAAqBF,KAAK,CAACC,OAA3B,aAAqB,gBAAeE,IAJxB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKQ,uBAAW;AAC/BL,kBAAAA,MAAM,EAANA,MAD+B;AAE/BI,kBAAAA,EAAE,EAAEF,KAAK,CAACC,OAAN,CAAcC,EAFa;AAG/BC,kBAAAA,IAAI,EAAEH,KAAK,CAACC,OAAN,CAAcE;AAHW,iBAAX,CALR;;AAAA;AAKRF,gBAAAA,OALQ;AAUdJ,gBAAAA,WAAW,CAAC,UAACO,QAAD;AAAA,yBAAc,yBAAQH,OAAR,6CAAoBG,QAApB,IAA+B,KAA/B,CAAd;AAAA,iBAAD,CAAX;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXL,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAeAD,IAAAA,MAAM,CAACO,EAAP,CAAU,0BAAV,EAAsCN,WAAtC;AACA,WAAO;AAAA,aAAMD,MAAM,CAACQ,GAAP,CAAW,0BAAX,EAAuCP,WAAvC,CAAN;AAAA,KAAP;AACD,GAlBD,EAkBG,EAlBH;AAmBD,CAjCM","sourcesContent":["import uniqBy from 'lodash/uniqBy';\nimport { useEffect } from 'react';\n\nimport { getChannel } from '../../utils';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../../types/types';\n\ntype Parameters<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  setChannels: React.Dispatch<React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>>;\n  onMessageNew?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>>,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n};\n\nexport const useNewMessageNotification = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  onMessageNew,\n  setChannels,\n}: Parameters<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  useEffect(() => {\n    const handleEvent = async (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      if (typeof onMessageNew === 'function') {\n        onMessageNew(setChannels, event);\n      } else {\n        if (event.channel?.id && event.channel?.type) {\n          const channel = await getChannel({\n            client,\n            id: event.channel.id,\n            type: event.channel.type,\n          });\n          setChannels((channels) => uniqBy([channel, ...channels], 'cid'));\n        }\n      }\n    };\n\n    client.on('notification.message_new', handleEvent);\n    return () => client.off('notification.message_new', handleEvent);\n  }, []);\n};\n"]}