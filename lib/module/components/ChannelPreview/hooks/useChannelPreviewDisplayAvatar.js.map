{"version":3,"sources":["useChannelPreviewDisplayAvatar.ts"],"names":["getChannelPreviewDisplayAvatar","channel","client","currentUserId","user","id","channelData","data","channelName","name","channelImage","image","members","Object","values","state","otherMembers","filter","member","length","images","slice","map","names","useChannelPreviewDisplayAvatar","displayAvatar","setDisplayAvatar"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAeO,IAAMA,8BAA8B,GAAG,SAAjCA,8BAAiC,CAS5CC,OAT4C,EAU5CC,MAV4C,EAWzC;AAAA;;AACH,MAAMC,aAAa,GAAGD,MAAH,oCAAGA,MAAM,CAAEE,IAAX,qBAAG,aAAcC,EAApC;AACA,MAAMC,WAAW,GAAGL,OAAH,oBAAGA,OAAO,CAAEM,IAA7B;AACA,MAAMC,WAAW,GAAGF,WAAH,oBAAGA,WAAW,CAAEG,IAAjC;AACA,MAAMC,YAAY,GAAGJ,WAAH,oBAAGA,WAAW,CAAEK,KAAlC;;AAEA,MAAID,YAAJ,EAAkB;AAChB,WAAO;AACLC,MAAAA,KAAK,EAAED,YADF;AAELD,MAAAA,IAAI,EAAED;AAFD,KAAP;AAID,GALD,MAKO,IAAIL,aAAJ,EAAmB;AAAA;;AACxB,QAAMS,OAAO,GAAGC,MAAM,CAACC,MAAP,mBAAcb,OAAO,CAACc,KAAtB,qBAAc,eAAeH,OAA7B,CAAhB;AACA,QAAMI,YAAY,GAAGJ,OAAO,CAACK,MAAR,CAAe,UAACC,MAAD;AAAA;;AAAA,aAAY,iBAAAA,MAAM,CAACd,IAAP,kCAAaC,EAAb,MAAoBF,aAAhC;AAAA,KAAf,CAArB;;AAEA,QAAIa,YAAY,CAACG,MAAb,KAAwB,CAA5B,EAA+B;AAAA;;AAC7B,aAAO;AACLR,QAAAA,KAAK,0BAAEK,YAAY,CAAC,CAAD,CAAZ,CAAgBZ,IAAlB,qBAAE,qBAAsBO,KADxB;AAELF,QAAAA,IAAI,EAAED,WAAW,8BAAIQ,YAAY,CAAC,CAAD,CAAZ,CAAgBZ,IAApB,qBAAI,sBAAsBK,IAA1B;AAFZ,OAAP;AAID;;AACD,WAAO;AACLW,MAAAA,MAAM,EAAEJ,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBC,GAAzB,CAA6B,UAACJ,MAAD;AAAA;;AAAA,eAAY,kBAAAA,MAAM,CAACd,IAAP,mCAAaO,KAAb,KAAsB,EAAlC;AAAA,OAA7B,CADH;AAELY,MAAAA,KAAK,EAAEP,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBC,GAAzB,CAA6B,UAACJ,MAAD;AAAA;;AAAA,eAAY,kBAAAA,MAAM,CAACd,IAAP,mCAAaK,IAAb,KAAqB,EAAjC;AAAA,OAA7B;AAFF,KAAP;AAID;;AACD,SAAO;AACLA,IAAAA,IAAI,EAAED;AADD,GAAP;AAGD,CAxCM;;;;AAgDA,IAAMgB,8BAA8B,GAAG,SAAjCA,8BAAiC,CAS5CvB,OAT4C,EAUzC;AAAA;;AACH,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,MAAMI,WAAW,GAAGL,OAAH,oBAAGA,OAAO,CAAEM,IAA7B;AACA,MAAMI,KAAK,GAAGL,WAAH,oBAAGA,WAAW,CAAEK,KAA3B;AACA,MAAMF,IAAI,GAAGH,WAAH,oBAAGA,WAAW,CAAEG,IAA1B;AACA,MAAMJ,EAAE,GAAGH,MAAH,qCAAGA,MAAM,CAAEE,IAAX,qBAAG,cAAcC,EAAzB;;AAEA,kBAA0C,qBACxCL,8BAA8B,CAACC,OAAD,EAAUC,MAAV,CADU,CAA1C;AAAA;AAAA,MAAOuB,aAAP;AAAA,MAAsBC,gBAAtB;;AAIA,wBAAU,YAAM;AACdA,IAAAA,gBAAgB,CAAC1B,8BAA8B,CAACC,OAAD,EAAUC,MAAV,CAA/B,CAAhB;AACD,GAFD,EAEG,CAACG,EAAD,EAAKM,KAAL,EAAYF,IAAZ,CAFH;AAIA,SAAOgB,aAAP;AACD,CA3BM","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\n\nimport type { Channel, StreamChat } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const getChannelPreviewDisplayAvatar = <\n  At extends DefaultAttachmentType = DefaultAttachmentType,\n  Ch extends DefaultChannelType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends DefaultEventType = DefaultEventType,\n  Me extends DefaultMessageType = DefaultMessageType,\n  Re extends DefaultReactionType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType,\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const currentUserId = client?.user?.id;\n  const channelData = channel?.data;\n  const channelName = channelData?.name;\n  const channelImage = channelData?.image;\n\n  if (channelImage) {\n    return {\n      image: channelImage,\n      name: channelName,\n    };\n  } else if (currentUserId) {\n    const members = Object.values(channel.state?.members);\n    const otherMembers = members.filter((member) => member.user?.id !== currentUserId);\n\n    if (otherMembers.length === 1) {\n      return {\n        image: otherMembers[0].user?.image,\n        name: channelName || otherMembers[0].user?.name,\n      };\n    }\n    return {\n      images: otherMembers.slice(0, 4).map((member) => member.user?.image || ''),\n      names: otherMembers.slice(0, 4).map((member) => member.user?.name || ''),\n    };\n  }\n  return {\n    name: channelName,\n  };\n};\n\n/**\n * Hook to set the display avatar for channel preview\n * @param {*} channel\n *\n * @returns {object} e.g., { image: 'http://dummyurl.com/test.png', name: 'Uhtred Bebbanburg' }\n */\nexport const useChannelPreviewDisplayAvatar = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends DefaultChannelType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const channelData = channel?.data;\n  const image = channelData?.image;\n  const name = channelData?.name;\n  const id = client?.user?.id;\n\n  const [displayAvatar, setDisplayAvatar] = useState(\n    getChannelPreviewDisplayAvatar(channel, client),\n  );\n\n  useEffect(() => {\n    setDisplayAvatar(getChannelPreviewDisplayAvatar(channel, client));\n  }, [id, image, name]);\n\n  return displayAvatar;\n};\n"]}