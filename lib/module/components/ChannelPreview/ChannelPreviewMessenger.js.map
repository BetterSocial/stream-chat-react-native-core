{"version":3,"sources":["ChannelPreviewMessenger.tsx"],"names":["styles","StyleSheet","create","container","borderBottomWidth","flex","flexDirection","paddingHorizontal","paddingVertical","contentContainer","row","alignItems","justifyContent","paddingLeft","title","fontSize","fontWeight","maxWidth","ChannelPreviewMessengerWithContext","props","channel","formatLatestMessageDate","latestMessagePreview","maxUnreadCount","onSelect","PreviewAvatar","ChannelAvatar","PreviewMessage","ChannelPreviewMessage","PreviewStatus","ChannelPreviewStatus","PreviewTitle","ChannelPreviewTitle","PreviewUnreadCount","ChannelPreviewUnreadCount","unread","theme","channelPreview","colors","border","white_snow","displayName","Math","floor","backgroundColor","borderBottomColor","MemoizedChannelPreviewMessengerWithContext","React","memo","ChannelPreviewMessenger"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nimport { ChannelAvatar } from './ChannelAvatar';\nimport { useChannelPreviewDisplayName } from './hooks/useChannelPreviewDisplayName';\n\nimport {\n  ChannelsContextValue,\n  useChannelsContext,\n} from '../../contexts/channelsContext/ChannelsContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { vw } from '../../utils/utils';\n\nimport type { ChannelPreviewProps } from './ChannelPreview';\nimport type { LatestMessagePreview } from './hooks/useLatestMessagePreview';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\nimport { ChannelPreviewTitle } from './ChannelPreviewTitle';\nimport { ChannelPreviewMessage } from './ChannelPreviewMessage';\nimport { ChannelPreviewStatus } from './ChannelPreviewStatus';\nimport { ChannelPreviewUnreadCount } from './ChannelPreviewUnreadCount';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomWidth: 1,\n    flex: 1,\n    flexDirection: 'row',\n    paddingHorizontal: 8,\n    paddingVertical: 12,\n  },\n  contentContainer: { flex: 1 },\n  row: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingLeft: 8,\n  },\n  title: { fontSize: 14, fontWeight: '700' },\n});\n\nconst maxWidth = vw(80) - 16 - 40;\n\nexport type ChannelPreviewMessengerPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Pick<ChannelPreviewProps<At, Ch, Co, Ev, Me, Re, Us>, 'channel'> &\n  Pick<\n    ChannelsContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n    | 'maxUnreadCount'\n    | 'onSelect'\n    | 'PreviewAvatar'\n    | 'PreviewMessage'\n    | 'PreviewStatus'\n    | 'PreviewTitle'\n    | 'PreviewUnreadCount'\n  > & {\n    /**\n     * Latest message on a channel, formatted for preview\n     *\n     * e.g.,\n     *\n     * ```json\n     * {\n     *  created_at: '' ,\n     *  messageObject: { ... },\n     *  previews: {\n     *    bold: true,\n     *    text: 'This is the message preview text'\n     *  },\n     *  status: 0 | 1 | 2 // read states of latest message.\n     * }\n     * ```\n     *\n     * @overrideType object\n     */\n    latestMessagePreview: LatestMessagePreview<At, Ch, Co, Ev, Me, Re, Us>;\n    /**\n     * Formatter function for date of latest message.\n     * @param date Message date\n     * @returns Formatted date string\n     *\n     * By default today's date is shown in 'HH:mm A' format and other dates\n     * are displayed in 'DD/MM/YY' format. props.latestMessage.created_at is the\n     * default formatted date. This default logic is part of ChannelPreview component.\n     */\n    formatLatestMessageDate?: (date: Date) => string;\n    /** Number of unread messages on the channel */\n    unread?: number;\n  };\n\nconst ChannelPreviewMessengerWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: ChannelPreviewMessengerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    channel,\n    formatLatestMessageDate,\n    latestMessagePreview,\n    maxUnreadCount,\n    onSelect,\n    PreviewAvatar = ChannelAvatar,\n    PreviewMessage = ChannelPreviewMessage,\n    PreviewStatus = ChannelPreviewStatus,\n    PreviewTitle = ChannelPreviewTitle,\n    PreviewUnreadCount = ChannelPreviewUnreadCount,\n    unread,\n  } = props;\n\n  const {\n    theme: {\n      channelPreview: { container, contentContainer, row, title },\n      colors: { border, white_snow },\n    },\n  } = useTheme();\n\n  const displayName = useChannelPreviewDisplayName(\n    channel,\n    Math.floor(maxWidth / ((title.fontSize || styles.title.fontSize) / 2)),\n  );\n\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        if (onSelect) {\n          onSelect(channel);\n        }\n      }}\n      style={[\n        styles.container,\n        { backgroundColor: white_snow, borderBottomColor: border },\n        container,\n      ]}\n      testID='channel-preview-button'\n    >\n      <PreviewAvatar channel={channel} />\n      <View style={[styles.contentContainer, contentContainer]}>\n        <View style={[styles.row, row]}>\n          <PreviewTitle channel={channel} displayName={displayName} />\n          <PreviewUnreadCount channel={channel} maxUnreadCount={maxUnreadCount} unread={unread} />\n        </View>\n        <View style={[styles.row, row]}>\n          <PreviewMessage latestMessagePreview={latestMessagePreview} />\n          <PreviewStatus\n            channel={channel}\n            formatLatestMessageDate={formatLatestMessageDate}\n            latestMessagePreview={latestMessagePreview}\n          />\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport type ChannelPreviewMessengerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Partial<\n  Omit<\n    ChannelPreviewMessengerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n    'channel' | 'latestMessagePreview'\n  >\n> &\n  Pick<\n    ChannelPreviewMessengerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n    'channel' | 'latestMessagePreview'\n  >;\n\nconst MemoizedChannelPreviewMessengerWithContext = React.memo(\n  ChannelPreviewMessengerWithContext,\n) as typeof ChannelPreviewMessengerWithContext;\n\n/**\n * This UI component displays an individual preview item for each channel in a list. It also receives all props\n * from the ChannelPreview component.\n */\nexport const ChannelPreviewMessenger = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: ChannelPreviewMessengerProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    maxUnreadCount,\n    onSelect,\n    PreviewAvatar,\n    PreviewMessage,\n    PreviewStatus,\n    PreviewTitle,\n    PreviewUnreadCount,\n  } = useChannelsContext<At, Ch, Co, Ev, Me, Re, Us>();\n  return (\n    <MemoizedChannelPreviewMessengerWithContext\n      {...{\n        maxUnreadCount,\n        onSelect,\n        PreviewAvatar,\n        PreviewMessage,\n        PreviewStatus,\n        PreviewTitle,\n        PreviewUnreadCount,\n      }}\n      {...props}\n    />\n  );\n};\n\nChannelPreviewMessenger.displayName = 'ChannelPreviewMessenger{channelPreview}';\n"]}