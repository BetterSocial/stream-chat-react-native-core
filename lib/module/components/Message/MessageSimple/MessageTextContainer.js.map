{"version":3,"sources":["MessageTextContainer.tsx"],"names":["styles","StyleSheet","create","textContainer","maxWidth","paddingHorizontal","MessageTextContainerWithContext","props","theme","markdownRules","markdownStyles","markdownStylesProp","message","messageOverlay","MessageText","onLongPress","onlyEmojis","onPress","preventPress","stylesProp","colors","messageSimple","content","markdown","onlyEmojiMarkdown","text","renderText","areEqual","prevProps","nextProps","prevMessage","prevOnlyEmojis","nextMessage","nextOnlyEmojis","messageTextEqual","onlyEmojisEqual","mentionedUsersEqual","mentioned_users","length","name","MemoizedMessageTextContainer","React","memo","MessageTextContainer","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { renderText, RenderTextParams } from './utils/renderText';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../../contexts/messagesContext/MessagesContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\n\nimport type { MarkdownStyle, Theme } from '../../../contexts/themeContext/utils/theme';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  textContainer: { maxWidth: 250, paddingHorizontal: 16 },\n});\n\nexport type MessageTextProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = MessageTextContainerProps<At, Ch, Co, Ev, Me, Re, Us> & {\n  renderText: (params: RenderTextParams<At, Ch, Co, Ev, Me, Re, Us>) => JSX.Element | null;\n  theme: { theme: Theme };\n};\n\nexport type MessageTextContainerPropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Pick<\n  MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n  'message' | 'onLongPress' | 'onlyEmojis' | 'onPress' | 'preventPress'\n> &\n  Pick<MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'markdownRules' | 'MessageText'> & {\n    markdownStyles?: MarkdownStyle;\n    messageOverlay?: boolean;\n    styles?: Partial<{\n      textContainer: StyleProp<ViewStyle>;\n    }>;\n  };\n\nconst MessageTextContainerWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: MessageTextContainerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const theme = useTheme();\n\n  const {\n    markdownRules,\n    markdownStyles: markdownStylesProp = {},\n    message,\n    messageOverlay,\n    MessageText,\n    onLongPress,\n    onlyEmojis,\n    onPress,\n    preventPress,\n    styles: stylesProp = {},\n  } = props;\n\n  const {\n    theme: {\n      colors,\n      messageSimple: {\n        content: {\n          markdown,\n          textContainer: { onlyEmojiMarkdown, ...textContainer },\n        },\n      },\n    },\n  } = theme;\n\n  if (!message.text) return null;\n\n  const markdownStyles = { ...markdown, ...markdownStylesProp };\n\n  return (\n    <View\n      style={[styles.textContainer, textContainer, stylesProp.textContainer]}\n      testID='message-text-container'\n    >\n      {MessageText ? (\n        <MessageText {...props} renderText={renderText} theme={theme} />\n      ) : (\n        renderText<At, Ch, Co, Ev, Me, Re, Us>({\n          colors,\n          markdownRules,\n          markdownStyles: {\n            ...markdownStyles,\n            ...(onlyEmojis ? onlyEmojiMarkdown : {}),\n          },\n          message,\n          messageOverlay,\n          onLongPress,\n          onlyEmojis,\n          onPress,\n          preventPress,\n        })\n      )}\n    </View>\n  );\n};\n\nconst areEqual = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  prevProps: MessageTextContainerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n  nextProps: MessageTextContainerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { message: prevMessage, onlyEmojis: prevOnlyEmojis } = prevProps;\n  const { message: nextMessage, onlyEmojis: nextOnlyEmojis } = nextProps;\n\n  const messageTextEqual = prevMessage.text === nextMessage.text;\n  if (!messageTextEqual) return false;\n\n  const onlyEmojisEqual = prevOnlyEmojis === nextOnlyEmojis;\n  if (!onlyEmojisEqual) return false;\n\n  const mentionedUsersEqual =\n    prevMessage.mentioned_users?.length === nextMessage.mentioned_users?.length &&\n    (nextMessage.mentioned_users?.length === 0 ||\n      (prevMessage.mentioned_users?.length &&\n        nextMessage.mentioned_users?.length &&\n        prevMessage.mentioned_users[0].name === nextMessage.mentioned_users[0].name));\n  if (!mentionedUsersEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageTextContainer = React.memo(\n  MessageTextContainerWithContext,\n  areEqual,\n) as typeof MessageTextContainerWithContext;\n\nexport type MessageTextContainerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Partial<MessageTextContainerPropsWithContext<At, Ch, Co, Ev, Me, Re, Us>>;\n\nexport const MessageTextContainer = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  props: MessageTextContainerProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { message, onLongPress, onlyEmojis, onPress, preventPress } =\n    useMessageContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { markdownRules, MessageText } = useMessagesContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  return (\n    <MemoizedMessageTextContainer\n      {...{\n        markdownRules,\n        message,\n        MessageText,\n        onLongPress,\n        onlyEmojis,\n        onPress,\n        preventPress,\n      }}\n      {...props}\n    />\n  );\n};\n\nMessageTextContainer.displayName = 'MessageTextContainer{messageSimple{content}}';\n"]}