{"version":3,"sources":["messageActions.ts"],"names":["messageActions","blockUser","canModifyMessage","copyMessage","deleteMessage","editMessage","error","flagMessage","isMyMessage","isThreadMessage","message","messageReactions","mutesEnabled","muteUser","quotedRepliesEnabled","quotedReply","retry","threadRepliesEnabled","threadReply","undefined","actions","push","text"],"mappings":";;;;;AAcO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OA8CiB;AAAA,MArC7CC,SAqC6C,QArC7CA,SAqC6C;AAAA,MApC7CC,gBAoC6C,QApC7CA,gBAoC6C;AAAA,MAnC7CC,WAmC6C,QAnC7CA,WAmC6C;AAAA,MAlC7CC,aAkC6C,QAlC7CA,aAkC6C;AAAA,MAjC7CC,WAiC6C,QAjC7CA,WAiC6C;AAAA,MAhC7CC,KAgC6C,QAhC7CA,KAgC6C;AAAA,MA/B7CC,WA+B6C,QA/B7CA,WA+B6C;AAAA,MA9B7CC,WA8B6C,QA9B7CA,WA8B6C;AAAA,MA7B7CC,eA6B6C,QA7B7CA,eA6B6C;AAAA,MA5B7CC,OA4B6C,QA5B7CA,OA4B6C;AAAA,MA3B7CC,gBA2B6C,QA3B7CA,gBA2B6C;AAAA,MA1B7CC,YA0B6C,QA1B7CA,YA0B6C;AAAA,MAzB7CC,QAyB6C,QAzB7CA,QAyB6C;AAAA,MAxB7CC,oBAwB6C,QAxB7CA,oBAwB6C;AAAA,MAvB7CC,WAuB6C,QAvB7CA,WAuB6C;AAAA,MAtB7CC,KAsB6C,QAtB7CA,KAsB6C;AAAA,MArB7CC,oBAqB6C,QArB7CA,oBAqB6C;AAAA,MApB7CC,WAoB6C,QApB7CA,WAoB6C;;AAC7C,MAAIP,gBAAJ,EAAsB;AACpB,WAAOQ,SAAP;AACD;;AAED,MAAMC,OAAoC,GAAG,EAA7C;;AAEA,MAAId,KAAK,IAAIE,WAAb,EAA0B;AACxBY,IAAAA,OAAO,CAACC,IAAR,CAAaL,KAAb;AACD;;AAED,MAAIF,oBAAoB,IAAI,CAACL,eAAzB,IAA4C,CAACH,KAAjD,EAAwD;AACtDc,IAAAA,OAAO,CAACC,IAAR,CAAaN,WAAb;AACD;;AAED,MAAIE,oBAAoB,IAAI,CAACR,eAAzB,IAA4C,CAACH,KAAjD,EAAwD;AACtDc,IAAAA,OAAO,CAACC,IAAR,CAAaH,WAAb;AACD;;AAED,MAAIhB,gBAAJ,EAAsB;AACpBkB,IAAAA,OAAO,CAACC,IAAR,CAAahB,WAAb;AACD;;AAED,MAAIK,OAAO,CAACY,IAAR,IAAgB,CAAChB,KAArB,EAA4B;AAC1Bc,IAAAA,OAAO,CAACC,IAAR,CAAalB,WAAb;AACD;;AAED,MAAIS,YAAY,IAAI,CAACJ,WAArB,EAAkC;AAChCY,IAAAA,OAAO,CAACC,IAAR,CAAaR,QAAb;AACD;;AAED,MAAI,CAACL,WAAL,EAAkB;AAChBY,IAAAA,OAAO,CAACC,IAAR,CAAad,WAAb;AACD;;AAED,MAAI,CAACC,WAAD,IAAgBN,gBAApB,EAAsC;AACpCkB,IAAAA,OAAO,CAACC,IAAR,CAAapB,SAAb;AACD;;AAED,MAAIC,gBAAJ,EAAsB;AACpBkB,IAAAA,OAAO,CAACC,IAAR,CAAajB,aAAb;AACD;;AAED,SAAOgB,OAAP;AACD,CA1FM","sourcesContent":["import type { MessageType } from '../../MessageList/hooks/useMessageList';\n\nimport type { MessageAction } from '../../../contexts/messageOverlayContext/MessageOverlayContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const messageActions = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  blockUser,\n  canModifyMessage,\n  copyMessage,\n  deleteMessage,\n  editMessage,\n  error,\n  flagMessage,\n  isMyMessage,\n  isThreadMessage,\n  message,\n  messageReactions,\n  mutesEnabled,\n  muteUser,\n  quotedRepliesEnabled,\n  quotedReply,\n  retry,\n  threadRepliesEnabled,\n  threadReply,\n}: {\n  blockUser: MessageAction | null;\n  canModifyMessage: boolean;\n  copyMessage: MessageAction | null;\n  deleteMessage: MessageAction | null;\n  editMessage: MessageAction | null;\n  error: boolean;\n  flagMessage: MessageAction | null;\n  isMyMessage: boolean;\n  isThreadMessage: boolean;\n  message: MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  messageReactions: boolean;\n  muteUser: MessageAction | null;\n  quotedReply: MessageAction | null;\n  retry: MessageAction | null;\n  threadReply: MessageAction | null;\n  mutesEnabled?: boolean;\n  quotedRepliesEnabled?: boolean;\n  threadRepliesEnabled?: boolean;\n}): Array<MessageAction | null> | undefined => {\n  if (messageReactions) {\n    return undefined;\n  }\n\n  const actions: Array<MessageAction | null> = [];\n\n  if (error && isMyMessage) {\n    actions.push(retry);\n  }\n\n  if (quotedRepliesEnabled && !isThreadMessage && !error) {\n    actions.push(quotedReply);\n  }\n\n  if (threadRepliesEnabled && !isThreadMessage && !error) {\n    actions.push(threadReply);\n  }\n\n  if (canModifyMessage) {\n    actions.push(editMessage);\n  }\n\n  if (message.text && !error) {\n    actions.push(copyMessage);\n  }\n\n  if (mutesEnabled && !isMyMessage) {\n    actions.push(muteUser);\n  }\n\n  if (!isMyMessage) {\n    actions.push(flagMessage);\n  }\n\n  if (!isMyMessage && canModifyMessage) {\n    actions.push(blockUser);\n  }\n\n  if (canModifyMessage) {\n    actions.push(deleteMessage);\n  }\n\n  return actions;\n};\n"]}