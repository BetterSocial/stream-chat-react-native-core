{"version":3,"sources":["PaginatedMessageListContext.tsx"],"names":["PaginatedMessageListContext","React","createContext","PaginatedMessageListProvider","children","value","usePaginatedMessageListContext","withPaginatedMessageListContext","Component","WithPaginatedMessageListContextComponent","props","paginatedMessageListContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AA0DO,IAAMA,2BAA2B,GAAGC,kBAAMC,aAAN,CACzC,EADyC,CAApC;;;;AAIA,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B;AAAA,MAS1CC,QAT0C,QAS1CA,QAT0C;AAAA,MAU1CC,KAV0C,QAU1CA,KAV0C;AAAA,SAc1C,gCAAC,2BAAD,CAA6B,QAA7B;AACE,IAAA,KAAK,EAAEA,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGD,QAHH,CAd0C;AAAA,CAArC;;;;AAqBA,IAAME,8BAA8B,GAAG,SAAjCA,8BAAiC;AAAA,SAS5C,uBAAWN,2BAAX,CAT4C;AAAA,CAAvC;;;;AAwBA,IAAMO,+BAA+B,GAAG,SAAlCA,+BAAkC,CAU7CC,SAV6C,EAW6C;AAC1F,MAAMC,wCAAwC,GAAG,SAA3CA,wCAA2C,CAC/CC,KAD+C,EAE5C;AACH,QAAMC,2BAA2B,GAC/BL,8BAA8B,EADhC;AAGA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,2BAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAPD;;AAQAF,EAAAA,wCAAwC,CAACG,WAAzC,uCAAyF,oCACvFJ,SADuF,CAAzF;AAGA,SAAOC,wCAAP;AACD,CAxBM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { ChannelState } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type PaginatedMessageListContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  /**\n   * Has more messages to load\n   */\n  hasMore: boolean;\n  /**\n   * Is loading more messages\n   */\n  loadingMore: boolean;\n  /**\n   * Is loading more recent messages\n   */\n  loadingMoreRecent: boolean;\n  /**\n   * Load more messages\n   */\n  loadMore: (limit?: number) => Promise<void>;\n  /**\n   * Load more recent messages\n   */\n  loadMoreRecent: (limit?: number) => Promise<void>;\n  /**\n   * Messages from client state\n   */\n  messages: ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messages'];\n  /**\n   * Set loadingMore\n   */\n  setLoadingMore: React.Dispatch<React.SetStateAction<boolean>>;\n  /**\n   * Set loadingMoreRecent\n   */\n  setLoadingMoreRecent: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PaginatedMessageListContext = React.createContext(\n  {} as PaginatedMessageListContextValue,\n);\n\nexport const PaginatedMessageListProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: PaginatedMessageListContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => (\n  <PaginatedMessageListContext.Provider\n    value={value as unknown as PaginatedMessageListContextValue}\n  >\n    {children}\n  </PaginatedMessageListContext.Provider>\n);\n\nexport const usePaginatedMessageListContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() =>\n  useContext(PaginatedMessageListContext) as unknown as PaginatedMessageListContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >;\n\n/**\n * Typescript currently does not support partial inference so if MessageListContextValue\n * typing is desired while using the HOC withMessageListContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withPaginatedMessageListContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof PaginatedMessageListContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithPaginatedMessageListContextComponent = (\n    props: Omit<P, keyof PaginatedMessageListContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const paginatedMessageListContext =\n      usePaginatedMessageListContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...paginatedMessageListContext} />;\n  };\n  WithPaginatedMessageListContextComponent.displayName = `WithPaginatedMessageListContext${getDisplayName(\n    Component,\n  )}`;\n  return WithPaginatedMessageListContextComponent;\n};\n"]}