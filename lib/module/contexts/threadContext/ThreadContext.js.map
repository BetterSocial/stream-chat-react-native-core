{"version":3,"sources":["ThreadContext.tsx"],"names":["ThreadContext","React","createContext","ThreadProvider","children","value","useThreadContext","withThreadContext","Component","WithThreadContextComponent","props","threadContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AAqCO,IAAMA,aAAa,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAAtB;;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAS5BC,QAT4B,QAS5BA,QAT4B;AAAA,MAU5BC,KAV4B,QAU5BA,KAV4B;AAAA,SAc5B,gCAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAd4B;AAAA,CAAvB;;;;AAmBA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAQzB,uBAAWN,aAAX,CARyB;AAAA,CAAzB;;;;AAeA,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAU/BC,SAV+B,EAW6C;AAC5E,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,KADiC,EAE9B;AACH,QAAMC,aAAa,GAAGL,gBAAgB,EAAtC;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,0BAA0B,CAACG,WAA3B,yBAA6D,oCAAeJ,SAAf,CAA7D;AACA,SAAOC,0BAAP;AACD,CArBM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { ChannelState } from 'stream-chat';\n\nimport type { MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ThreadContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  allowThreadMessagesInChannel: boolean;\n  closeThread: () => void;\n  loadMoreThread: () => Promise<void>;\n  openThread: (message: MessageType<At, Ch, Co, Ev, Me, Re, Us>) => void;\n  reloadThread: () => void;\n  setThreadLoadingMore: React.Dispatch<React.SetStateAction<boolean>>;\n  thread: MessageType<At, Ch, Co, Ev, Me, Re, Us> | null;\n  threadHasMore: boolean;\n  threadLoadingMore: boolean;\n  threadMessages: ChannelState<At, Ch, Co, Ev, Me, Re, Us>['threads'][string];\n};\n\nexport const ThreadContext = React.createContext({} as ThreadContextValue);\n\nexport const ThreadProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => (\n  <ThreadContext.Provider value={value as unknown as ThreadContextValue}>\n    {children}\n  </ThreadContext.Provider>\n);\n\nexport const useThreadContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() => useContext(ThreadContext) as unknown as ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n\n/**\n * Typescript currently does not support partial inference so if ThreadContext\n * typing is desired while using the HOC withThreadContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withThreadContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithThreadContextComponent = (\n    props: Omit<P, keyof ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const threadContext = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...threadContext} />;\n  };\n  WithThreadContextComponent.displayName = `WithThreadContext${getDisplayName(Component)}`;\n  return WithThreadContextComponent;\n};\n"]}