{"version":3,"sources":["OverlayContext.tsx"],"names":["OverlayContext","React","createContext","useOverlayContext","withOverlayContext","Component","WithOverlayContextComponent","props","overlayContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AAmCO,IAAMA,cAAc,GAAGC,kBAAMC,aAAN,CAAyC,EAAzC,CAAvB;;;;AAyCA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAM,uBAAWH,cAAX,CAAN;AAAA,CAA1B;;;;AAEA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,SADgC,EAEiB;AACjD,MAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,KAAD,EAA+C;AACjF,QAAMC,cAAc,GAAGL,iBAAiB,EAAxC;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAJD;;AAKAF,EAAAA,2BAA2B,CAACG,WAA5B,0BAA+D,oCAAeJ,SAAf,CAA/D;AACA,SAAOC,2BAAP;AACD,CAVM","sourcesContent":["import React, { useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { BottomSheetMethods } from '@gorhom/bottom-sheet/lib/typescript/types';\n\nimport type { AttachmentPickerContextValue } from '../attachmentPickerContext/AttachmentPickerContext';\nimport type { MessageOverlayContextValue } from '../messageOverlayContext/MessageOverlayContext';\nimport type { DeepPartial } from '../themeContext/ThemeContext';\nimport type { Theme } from '../themeContext/utils/theme';\n\nimport type { AttachmentPickerProps } from '../../components/AttachmentPicker/AttachmentPicker';\nimport type { ImageGalleryCustomComponents } from '../../components/ImageGallery/ImageGallery';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\nimport type { Streami18n } from '../../utils/Streami18n';\n\nexport type BlurType = 'light' | 'dark' | undefined;\n\nexport type Overlay = 'alert' | 'gallery' | 'message' | 'none';\n\nexport type OverlayContextValue = {\n  overlay: Overlay;\n  setBlurType: React.Dispatch<React.SetStateAction<BlurType>>;\n  setOverlay: React.Dispatch<React.SetStateAction<Overlay>>;\n  style?: DeepPartial<Theme>;\n  translucentStatusBar?: boolean;\n};\n\nexport const OverlayContext = React.createContext<OverlayContextValue>({} as OverlayContextValue);\n\nexport type OverlayProviderProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = Partial<AttachmentPickerProps> &\n  Partial<\n    Pick<\n      AttachmentPickerContextValue,\n      | 'attachmentPickerBottomSheetHeight'\n      | 'attachmentSelectionBarHeight'\n      | 'bottomInset'\n      | 'CameraSelectorIcon'\n      | 'FileSelectorIcon'\n      | 'ImageSelectorIcon'\n      | 'topInset'\n    >\n  > &\n  ImageGalleryCustomComponents<Us> &\n  Partial<\n    Pick<\n      MessageOverlayContextValue<At, Ch, Co, Ev, Me, Re, Us>,\n      'MessageActions' | 'OverlayReactionList' | 'OverlayReactions'\n    >\n  > &\n  Pick<OverlayContextValue, 'translucentStatusBar'> & {\n    closePicker?: (ref: React.RefObject<BottomSheetMethods>) => void;\n    /** https://github.com/GetStream/stream-chat-react-native/wiki/Internationalization-(i18n) */\n    i18nInstance?: Streami18n;\n    imageGalleryGridHandleHeight?: number;\n    imageGalleryGridSnapPoints?: [string | number, string | number];\n    numberOfImageGalleryGridColumns?: number;\n    openPicker?: (ref: React.RefObject<BottomSheetMethods>) => void;\n    value?: Partial<OverlayContextValue>;\n  };\n\nexport const useOverlayContext = () => useContext(OverlayContext);\n\nexport const withOverlayContext = <P extends UnknownType>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof OverlayContextValue>> => {\n  const WithOverlayContextComponent = (props: Omit<P, keyof OverlayContextValue>) => {\n    const overlayContext = useOverlayContext();\n\n    return <Component {...(props as P)} {...overlayContext} />;\n  };\n  WithOverlayContextComponent.displayName = `WithOverlayContext${getDisplayName(Component)}`;\n  return WithOverlayContextComponent;\n};\n"]}