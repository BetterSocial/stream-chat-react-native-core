{"version":3,"sources":["MessageOverlayContext.tsx"],"names":["MessageOverlayContext","React","createContext","MessageOverlayProvider","children","value","data","setData","reset","messageOverlayContext","useMessageOverlayContext","withMessageOverlayContext","Component","WithMessageOverlayContextComponent","props","messageContext","displayName"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AA0FO,IAAMA,qBAAqB,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAA9B;;;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAa/B;AAAA,MAJLC,QAIK,QAJLA,QAIK;AAAA,MAHLC,KAGK,QAHLA,KAGK;;AACL,kBAAwB,qBAASA,KAAT,oBAASA,KAAK,CAAEC,IAAhB,CAAxB;AAAA;AAAA,MAAOA,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBD,IAAAA,OAAO,CAACF,KAAD,oBAACA,KAAK,CAAEC,IAAR,CAAP;AACD,GAFD;;AAIA,MAAMG,qBAAqB,GAAG;AAC5BH,IAAAA,IAAI,EAAJA,IAD4B;AAE5BE,IAAAA,KAAK,EAALA,KAF4B;AAG5BD,IAAAA,OAAO,EAAPA;AAH4B,GAA9B;AAKA,SACE,gCAAC,qBAAD,CAAuB,QAAvB;AAAgC,IAAA,KAAK,EAAEE,qBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CADF;AAKD,CA9BM;;;;AAgCA,IAAMM,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SAStC,uBAAWV,qBAAX,CATsC;AAAA,CAAjC;;;;AAwBA,IAAMW,yBAAyB,GAAG,SAA5BA,yBAA4B,CAUvCC,SAVuC,EAW6C;AACpF,MAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CACzCC,KADyC,EAEtC;AACH,QAAMC,cAAc,GAAGL,wBAAwB,EAA/C;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,kCAAkC,CAACG,WAAnC,iCAA6E,oCAC3EJ,SAD2E,CAA7E;AAGA,SAAOC,kCAAP;AACD,CAvBM","sourcesContent":["import React, { PropsWithChildren, useContext, useState } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { StyleProp, TextStyle } from 'react-native';\nimport type { Attachment } from 'stream-chat';\n\nimport type { Alignment, MessageContextValue } from '../messageContext/MessageContext';\nimport type { MessagesContextValue } from '../messagesContext/MessagesContext';\n\nimport type { GroupType, MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { MessageActionsProps } from '../../components/MessageOverlay/MessageActions';\nimport type { OverlayReactionListProps } from '../../components/MessageOverlay/OverlayReactionList';\nimport type { OverlayReactionsProps } from '../../components/MessageOverlay/OverlayReactions';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\nimport type { ReactionData } from '../../utils/utils';\n\nexport type MessageAction = {\n  action: () => void;\n  title: string;\n  icon?: React.ReactElement;\n  titleStyle?: StyleProp<TextStyle>;\n};\n\nexport type MessageOverlayData<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  alignment?: Alignment;\n  clientId?: string;\n  files?: Attachment<At>[];\n  groupStyles?: GroupType[];\n  handleReaction?: (reactionType: string) => Promise<void>;\n  images?: Attachment<At>[];\n  message?: MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  messageActions?: MessageAction[];\n  messageContext?: MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n  messageReactionTitle?: string;\n  messagesContext?: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n  onlyEmojis?: boolean;\n  otherAttachments?: Attachment<At>[];\n  OverlayReactionList?: React.ComponentType<OverlayReactionListProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  supportedReactions?: ReactionData[];\n  threadList?: boolean;\n};\n\nexport type MessageOverlayContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  /**\n   * Custom UI component for rendering [message actions](https://github.com/GetStream/stream-chat-react-native/blob/master/screenshots/docs/2.png) in overlay.\n   *\n   * **Default** [MessageActions](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageOverlay/MessageActions.tsx)\n   */\n  MessageActions: React.ComponentType<MessageActionsProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /**\n   * Custom UI component for rendering [reaction selector](https://github.com/GetStream/stream-chat-react-native/blob/master/screenshots/docs/2.png) in overlay (which shows up on long press on message).\n   *\n   * **Default** [OverlayReactionList](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageOverlay/OverlayReactionList.tsx)\n   */\n  OverlayReactionList: React.ComponentType<OverlayReactionListProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /**\n   * Custom UI component for rendering [reactions list](https://github.com/GetStream/stream-chat-react-native/blob/master/screenshots/docs/2.png), in overlay (which shows up on long press on message).\n   *\n   * **Default** [OverlayReactions](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageOverlay/OverlayReactions.tsx)\n   */\n  OverlayReactions: React.ComponentType<OverlayReactionsProps>;\n  reset: () => void;\n  setData: React.Dispatch<React.SetStateAction<MessageOverlayData<At, Ch, Co, Ev, Me, Re, Us>>>;\n  data?: MessageOverlayData<At, Ch, Co, Ev, Me, Re, Us>;\n};\n\nexport const MessageOverlayContext = React.createContext({} as MessageOverlayContextValue);\n\nexport const MessageOverlayProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: MessageOverlayContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => {\n  const [data, setData] = useState(value?.data);\n\n  const reset = () => {\n    setData(value?.data);\n  };\n\n  const messageOverlayContext = {\n    data,\n    reset,\n    setData,\n  };\n  return (\n    <MessageOverlayContext.Provider value={messageOverlayContext as MessageOverlayContextValue}>\n      {children}\n    </MessageOverlayContext.Provider>\n  );\n};\n\nexport const useMessageOverlayContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>() =>\n  useContext(MessageOverlayContext) as unknown as MessageOverlayContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >;\n\n/**\n * Typescript currently does not support partial inference so if MessageOverlayContext\n * typing is desired while using the HOC withMessageOverlayContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageOverlayContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageOverlayContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithMessageOverlayContextComponent = (\n    props: Omit<P, keyof MessageOverlayContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const messageContext = useMessageOverlayContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...messageContext} />;\n  };\n  WithMessageOverlayContextComponent.displayName = `WithMessageOverlayContext${getDisplayName(\n    Component,\n  )}`;\n  return WithMessageOverlayContextComponent;\n};\n"]}