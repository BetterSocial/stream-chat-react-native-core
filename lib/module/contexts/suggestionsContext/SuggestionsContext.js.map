{"version":3,"sources":["SuggestionsContext.tsx"],"names":["isSuggestionCommand","suggestion","isSuggestionEmoji","isSuggestionUser","SuggestionsContext","React","createContext","SuggestionsProvider","children","value","componentType","setComponentType","suggestions","setSuggestions","suggestionsTitle","setSuggestionsTitle","suggestionsViewActive","setSuggestionsViewActive","openSuggestions","component","title","updateSuggestions","newSuggestions","newSuggestionsTitle","closeSuggestions","undefined","suggestionsContext","useSuggestionsContext","withSuggestionsContext","Component","WithSuggestionsContextComponent","props","displayName"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useContext, useState } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { CommandResponse, UserResponse } from 'stream-chat';\n\nimport type { Emoji } from '../../emoji-data/compiled';\nimport type { DefaultCommandType, DefaultUserType, UnknownType } from '../../types/types';\n\nexport type SuggestionComponentType<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n> = string | React.ReactElement<{ item: Suggestion<Co, Us> }>;\n\nexport const isSuggestionCommand = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  suggestion: Suggestion<Co, Us>,\n): suggestion is SuggestionCommand<Co> => 'args' in suggestion;\n\nexport const isSuggestionEmoji = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  suggestion: Suggestion<Co, Us>,\n): suggestion is Emoji => 'unicode' in suggestion;\n\nexport const isSuggestionUser = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  suggestion: Suggestion<Co, Us>,\n): suggestion is SuggestionUser<Us> => 'id' in suggestion;\n\nexport type Suggestion<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n> = SuggestionCommand<Co> | SuggestionUser<Us> | Emoji;\n\nexport type SuggestionCommand<Co extends string = DefaultCommandType> = CommandResponse<Co>;\n\nexport type SuggestionUser<Us extends UnknownType = DefaultUserType> = UserResponse<Us>;\n\nexport type Suggestions<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  data: Suggestion<Co, Us>[];\n  onSelect: (item: Suggestion<Co, Us>) => void;\n};\n\nexport type SuggestionsContextValue<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n> = {\n  /** Override handler for closing suggestions (mentions, command autocomplete etc) */\n  closeSuggestions: () => void;\n  /**\n   * Override handler for opening suggestions (mentions, command autocomplete etc)\n   *\n   * @param component {Component|element} UI Component for suggestion item.\n   * @param title {string} Title for suggestions box\n   *\n   * @overrideType Function\n   */\n  openSuggestions: (\n    component: SuggestionComponentType<Co, Us>,\n    title?: React.ReactElement,\n  ) => Promise<void>;\n  /**\n   * Override handler for updating suggestions (mentions, command autocomplete etc)\n   *\n   * @param newSuggestions {Component|element} UI Component for suggestion item.\n   * @param newSuggestionsTitle {string} Title for suggestions box\n   *\n   * @overrideType Function\n   */\n  updateSuggestions: (\n    newSuggestions: Suggestions<Co, Us>,\n    newSuggestionsTitle?: React.ReactElement,\n  ) => void;\n  componentType?: SuggestionComponentType<Co, Us>;\n  suggestions?: Suggestions<Co, Us>;\n  suggestionsTitle?: React.ReactElement;\n  suggestionsViewActive?: boolean;\n};\n\nexport const SuggestionsContext = React.createContext({} as SuggestionsContextValue);\n\n/**\n * This provider component exposes the properties stored within the SuggestionsContext.\n */\nexport const SuggestionsProvider = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>({\n  children,\n  value,\n}: PropsWithChildren<{ value?: Partial<SuggestionsContextValue<Co, Us>> }>) => {\n  const [componentType, setComponentType] = useState<SuggestionComponentType<Co, Us>>('');\n  const [suggestions, setSuggestions] = useState<Suggestions<Co, Us>>();\n  const [suggestionsTitle, setSuggestionsTitle] = useState<React.ReactElement>();\n  const [suggestionsViewActive, setSuggestionsViewActive] = useState(false);\n\n  const openSuggestions = (\n    component: SuggestionComponentType<Co, Us>,\n    title?: React.ReactElement,\n  ) => {\n    setComponentType(component);\n    setSuggestionsTitle(title);\n    setSuggestionsViewActive(true);\n  };\n\n  const updateSuggestions = (\n    newSuggestions: Suggestions<Co, Us>,\n    newSuggestionsTitle?: React.ReactElement,\n  ) => {\n    setSuggestions(newSuggestions);\n    if (newSuggestionsTitle) {\n      setSuggestionsTitle(newSuggestionsTitle);\n    }\n    setSuggestionsViewActive(!!componentType);\n  };\n\n  const closeSuggestions = () => {\n    setComponentType('');\n    setSuggestions(undefined);\n    setSuggestionsTitle(undefined);\n    setSuggestionsViewActive(false);\n  };\n\n  const suggestionsContext = {\n    closeSuggestions: value?.closeSuggestions || closeSuggestions,\n    componentType,\n    openSuggestions: value?.openSuggestions || openSuggestions,\n    suggestions,\n    suggestionsTitle,\n    suggestionsViewActive,\n    updateSuggestions: value?.updateSuggestions || updateSuggestions,\n  };\n\n  return (\n    <SuggestionsContext.Provider value={suggestionsContext as unknown as SuggestionsContextValue}>\n      {children}\n    </SuggestionsContext.Provider>\n  );\n};\n\nexport const useSuggestionsContext = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>() => useContext(SuggestionsContext) as unknown as SuggestionsContextValue<Co, Us>;\n\nexport const withSuggestionsContext = <\n  P extends UnknownType,\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof SuggestionsContextValue<Co, Us>>> => {\n  const WithSuggestionsContextComponent = (\n    props: Omit<P, keyof SuggestionsContextValue<Co, Us>>,\n  ) => {\n    const suggestionsContext = useSuggestionsContext<Co, Us>();\n\n    return <Component {...(props as P)} {...suggestionsContext} />;\n  };\n  WithSuggestionsContextComponent.displayName = `WithSuggestionsContext${getDisplayName(\n    Component,\n  )}`;\n  return WithSuggestionsContextComponent;\n};\n"]}