{"version":3,"sources":["ArgumentsRenderer.tsx"],"names":["styles","space","headingWrapper","marginBottom","root","fontSize","ArgumentsRenderer","args","classes","heading","length","map","arg","name","propTypes","PropTypes","arrayOf","shape","description","string","isRequired","type","object","objectOf","bool"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;AAGO,IAAMA,MAAM,GAAG,SAATA,MAAS;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAA2B;AAC/CC,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAEF,KAAK,CAAC,CAAD;AADL,KAD+B;AAI/CG,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,SADN;AAEJF,MAAAA,YAAY,EAAEF,KAAK,CAAC,CAAD;AAFf;AAJyC,GAA3B;AAAA,CAAf;;;;AAgBA,IAAMK,iBAA0D,GAAG,SAA7DA,iBAA6D,QAIpE;AAAA,MAHJC,IAGI,SAHJA,IAGI;AAAA,MAFJC,OAEI,SAFJA,OAEI;AAAA,MADJC,OACI,SADJA,OACI;;AACJ,MAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACJ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,OAAO,IACN;AAAK,IAAA,SAAS,EAAED,OAAO,CAACN,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,mBAAD;AAAS,IAAA,KAAK,EAAE,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAFJ,EAMGK,IAAI,CAACI,GAAL,CAAS,UAACC,GAAD;AAAA,WACR,gCAAC,oBAAD;AAAU,MAAA,GAAG,EAAEA,GAAG,CAACC;AAAnB,OAA6BD,GAA7B;AAAkC,MAAA,KAAK,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADQ;AAAA,GAAT,CANH,CADF;AAYD,CArBM;;;AAuBPN,iBAAiB,CAACQ,SAAlB,GAA8B;AAC5BP,EAAAA,IAAI,EAAEQ,sBAAUC,OAAV,CACJD,sBAAUE,KAAV,CAAgB;AACdC,IAAAA,WAAW,EAAEH,sBAAUI,MADT;AAEdN,IAAAA,IAAI,EAAEE,sBAAUI,MAAV,CAAiBC,UAFT;AAGdC,IAAAA,IAAI,EAAEN,sBAAUO;AAHF,GAAhB,EAIGF,UALC,EAMJA,UAP0B;AAQ5BZ,EAAAA,OAAO,EAAEO,sBAAUQ,QAAV,CAAmBR,sBAAUI,MAAV,CAAiBC,UAApC,EAAgDA,UAR7B;AAS5BX,EAAAA,OAAO,EAAEM,sBAAUS;AATS,CAA9B;;eAYe,wBAAuBxB,MAAvB,EAA+BM,iBAA/B,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Styled, { JssInjectedProps } from 'react-styleguidist/lib/client/rsg-components/Styled';\nimport Argument, { ArgumentProps } from 'react-styleguidist/lib/client/rsg-components/Argument';\nimport Heading from 'react-styleguidist/lib/client/rsg-components/Heading';\nimport * as Rsg from 'react-styleguidist/lib/typings';\n\nexport const styles = ({ space }: Rsg.Theme) => ({\n  headingWrapper: {\n    marginBottom: space[0],\n  },\n  root: {\n    fontSize: 'inherit',\n    marginBottom: space[2],\n  },\n});\n\ninterface ArgumentsProps extends JssInjectedProps {\n  args: ArgumentProps[];\n  classes: Record<string, string>;\n  heading?: boolean;\n}\n\nexport const ArgumentsRenderer: React.FunctionComponent<ArgumentsProps> = ({\n  args,\n  classes,\n  heading,\n}) => {\n  if (args.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={classes.root}>\n      {heading && (\n        <div className={classes.headingWrapper}>\n          <Heading level={5}>Arguments</Heading>\n        </div>\n      )}\n      {args.map((arg) => (\n        <Argument key={arg.name} {...arg} block />\n      ))}\n    </div>\n  );\n};\n\nArgumentsRenderer.propTypes = {\n  args: PropTypes.arrayOf(\n    PropTypes.shape({\n      description: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      type: PropTypes.object,\n    }).isRequired,\n  ).isRequired,\n  classes: PropTypes.objectOf(PropTypes.string.isRequired).isRequired,\n  heading: PropTypes.bool,\n};\n\nexport default Styled<ArgumentsProps>(styles)(ArgumentsRenderer);\n"]}