{"version":3,"sources":["native.ts"],"names":["fail","Error","BlurView","compressImage","deleteFile","getLocalAssetUri","getPhotos","FlatList","DefaultFlatList","NetInfo","addEventListener","fetch","pickDocument","saveFile","shareImage","takePhoto","triggerHaptic","SDK","registerNativeHandlers","handlers"],"mappings":";;;;;AAAA;;AAGA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,QAAMC,KAAK,CACT,mGADS,CAAX;AAGD,CAJD;;AAWO,IAAIC,QAAkB,GAAGF,IAAzB;;AAaA,IAAIG,aAA4B,GAAGH,IAAnC;;AAGA,IAAII,UAAsB,GAAGJ,IAA7B;;AAGA,IAAIK,gBAAkC,GAAGL,IAAzC;;AAgBA,IAAIM,SAAoB,GAAGN,IAA3B;;AAOA,IAAIO,QAAQ,GAAGC,qBAAf;;AAEA,IAAIC,OAAgB,GAAG;AAC5BC,EAAAA,gBAAgB,EAAEV,IADU;AAE5BW,EAAAA,KAAK,EAAEX;AAFqB,CAAvB;;AAgBA,IAAIY,YAA0B,GAAGZ,IAAjC;;AAOA,IAAIa,QAAkB,GAAGb,IAAzB;;AAOA,IAAIc,UAAsB,GAAGd,IAA7B;;AASA,IAAIe,SAAoB,GAAGf,IAA3B;;AAWA,IAAIgB,aAA4B,GAAGhB,IAAnC;;AAEA,IAAIiB,GAAJ;;;AAkBA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAwB;AAC5D,MAAIA,QAAQ,CAACjB,QAAb,EAAuB;AACrB,uBAAAA,QAAQ,GAAGiB,QAAQ,CAACjB,QAApB;AACD;;AAED,MAAIiB,QAAQ,CAAChB,aAAb,EAA4B;AAC1B,4BAAAA,aAAa,GAAGgB,QAAQ,CAAChB,aAAzB;AACD;;AAED,MAAIgB,QAAQ,CAACf,UAAb,EAAyB;AACvB,yBAAAA,UAAU,GAAGe,QAAQ,CAACf,UAAtB;AACD;;AAED,MAAIe,QAAQ,CAACZ,QAAb,EAAuB;AACrB,uBAAAA,QAAQ,GAAGY,QAAQ,CAACZ,QAApB;AACD;;AACD,MAAIY,QAAQ,CAACV,OAAb,EAAsB;AACpB,sBAAAA,OAAO,GAAGU,QAAQ,CAACV,OAAnB;AACD;;AAED,MAAIU,QAAQ,CAACd,gBAAb,EAA+B;AAC7B,+BAAAA,gBAAgB,GAAGc,QAAQ,CAACd,gBAA5B;AACD;;AAED,MAAIc,QAAQ,CAACb,SAAb,EAAwB;AACtB,wBAAAA,SAAS,GAAGa,QAAQ,CAACb,SAArB;AACD;;AAED,MAAIa,QAAQ,CAACV,OAAb,EAAsB;AACpB,sBAAAA,OAAO,GAAGU,QAAQ,CAACV,OAAnB;AACD;;AAED,MAAIU,QAAQ,CAACP,YAAb,EAA2B;AACzB,2BAAAA,YAAY,GAAGO,QAAQ,CAACP,YAAxB;AACD;;AAED,MAAIO,QAAQ,CAACN,QAAb,EAAuB;AACrB,uBAAAA,QAAQ,GAAGM,QAAQ,CAACN,QAApB;AACD;;AAED,MAAIM,QAAQ,CAACF,GAAb,EAAkB;AAChB,kBAAAA,GAAG,GAAGE,QAAQ,CAACF,GAAf;AACD;;AAED,MAAIE,QAAQ,CAACL,UAAb,EAAyB;AACvB,yBAAAA,UAAU,GAAGK,QAAQ,CAACL,UAAtB;AACD;;AAED,MAAIK,QAAQ,CAACJ,SAAb,EAAwB;AACtB,wBAAAA,SAAS,GAAGI,QAAQ,CAACJ,SAArB;AACD;;AAED,MAAII,QAAQ,CAACH,aAAb,EAA4B;AAC1B,4BAAAA,aAAa,GAAGG,QAAQ,CAACH,aAAzB;AACD;AACF,CAvDM","sourcesContent":["import { FlatList as DefaultFlatList, StyleProp, ViewStyle } from 'react-native';\nimport type { NetInfoSubscription } from '@react-native-community/netinfo';\n\nconst fail = () => {\n  throw Error(\n    'Native handler was not registered, you should import stream-chat-expo or stream-chat-react-native',\n  );\n};\n\ntype BlurView = React.ComponentType<{\n  blurAmount?: number;\n  blurType?: string;\n  style?: StyleProp<ViewStyle>;\n}>;\nexport let BlurView: BlurView = fail;\n\ntype CompressImage = ({\n  compressImageQuality,\n  height,\n  uri,\n  width,\n}: {\n  compressImageQuality: number;\n  height: number;\n  uri: string;\n  width: number;\n}) => Promise<string> | never;\nexport let compressImage: CompressImage = fail;\n\ntype DeleteFile = ({ uri }: { uri: string }) => Promise<boolean> | never;\nexport let deleteFile: DeleteFile = fail;\n\ntype GetLocalAssetUri = (uriOrAssetId: string) => Promise<string> | never;\nexport let getLocalAssetUri: GetLocalAssetUri = fail;\n\nexport type Asset = {\n  height: number;\n  source: 'camera' | 'picker';\n  uri: string;\n  width: number;\n  id?: string;\n};\ntype GetPhotos = ({ after, first }: { first: number; after?: string }) =>\n  | Promise<{\n      assets: Array<Omit<Asset, 'source'> & { source: 'picker' }>;\n      endCursor: string;\n      hasNextPage: boolean;\n    }>\n  | never;\nexport let getPhotos: GetPhotos = fail;\n\ntype NetInfo = {\n  addEventListener: (listener: (isConnected: boolean) => void) => NetInfoSubscription | never;\n  fetch: (requestedInterface?: string | undefined) => Promise<boolean> | never;\n};\n\nexport let FlatList = DefaultFlatList;\n\nexport let NetInfo: NetInfo = {\n  addEventListener: fail,\n  fetch: fail,\n};\n\ntype PickDocument = ({ maxNumberOfFiles }: { maxNumberOfFiles?: number }) =>\n  | Promise<{\n      cancelled: boolean;\n      docs?: {\n        name: string;\n        size?: number | string;\n        type?: string;\n        uri?: string;\n      }[];\n    }>\n  | never;\nexport let pickDocument: PickDocument = fail;\n\ntype SaveFileOptions = {\n  fileName: string;\n  fromUrl: string;\n};\ntype SaveFile = (options: SaveFileOptions) => Promise<string> | never;\nexport let saveFile: SaveFile = fail;\n\ntype ShareOptions = {\n  type?: string;\n  url?: string;\n};\ntype ShareImage = (options: ShareOptions) => Promise<boolean> | never;\nexport let shareImage: ShareImage = fail;\n\ntype Photo =\n  | (Omit<Asset, 'source'> & {\n      cancelled: false;\n      source: 'camera';\n    })\n  | { cancelled: true };\ntype TakePhoto = (options: { compressImageQuality?: number }) => Promise<Photo> | never;\nexport let takePhoto: TakePhoto = fail;\n\ntype HapticFeedbackMethod =\n  | 'impactHeavy'\n  | 'impactLight'\n  | 'impactMedium'\n  | 'notificationError'\n  | 'notificationSuccess'\n  | 'notificationWarning'\n  | 'selection';\ntype TriggerHaptic = (method: HapticFeedbackMethod) => void | never;\nexport let triggerHaptic: TriggerHaptic = fail;\n\nexport let SDK: string;\n\ntype Handlers = {\n  BlurView?: BlurView;\n  compressImage?: CompressImage;\n  deleteFile?: DeleteFile;\n  FlatList?: typeof DefaultFlatList;\n  getLocalAssetUri?: GetLocalAssetUri;\n  getPhotos?: GetPhotos;\n  NetInfo?: NetInfo;\n  pickDocument?: PickDocument;\n  saveFile?: SaveFile;\n  SDK?: string;\n  shareImage?: ShareImage;\n  takePhoto?: TakePhoto;\n  triggerHaptic?: TriggerHaptic;\n};\n\nexport const registerNativeHandlers = (handlers: Handlers) => {\n  if (handlers.BlurView) {\n    BlurView = handlers.BlurView;\n  }\n\n  if (handlers.compressImage) {\n    compressImage = handlers.compressImage;\n  }\n\n  if (handlers.deleteFile) {\n    deleteFile = handlers.deleteFile;\n  }\n\n  if (handlers.FlatList) {\n    FlatList = handlers.FlatList;\n  }\n  if (handlers.NetInfo) {\n    NetInfo = handlers.NetInfo;\n  }\n\n  if (handlers.getLocalAssetUri) {\n    getLocalAssetUri = handlers.getLocalAssetUri;\n  }\n\n  if (handlers.getPhotos) {\n    getPhotos = handlers.getPhotos;\n  }\n\n  if (handlers.NetInfo) {\n    NetInfo = handlers.NetInfo;\n  }\n\n  if (handlers.pickDocument) {\n    pickDocument = handlers.pickDocument;\n  }\n\n  if (handlers.saveFile) {\n    saveFile = handlers.saveFile;\n  }\n\n  if (handlers.SDK) {\n    SDK = handlers.SDK;\n  }\n\n  if (handlers.shareImage) {\n    shareImage = handlers.shareImage;\n  }\n\n  if (handlers.takePhoto) {\n    takePhoto = handlers.takePhoto;\n  }\n\n  if (handlers.triggerHaptic) {\n    triggerHaptic = handlers.triggerHaptic;\n  }\n};\n"]}